/**
 * @author Gulraj Singh Mrok, University Osnabrück, Germany
 */
import de.uos.dgrlvq.*;
import de.uos.dgrlvq.distance.*;
import java.io.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;

public class StartGUI extends javax.swing.JFrame implements Runnable
{
    private Painting painting;
    private DistanceInterface distanceRef= new DistanceGeneralizedWeightedEuclidean ();
    private double lambdas[] =new double[2];
    private DGRLVQClassifier classifier;
    private int runningmode=0;
    private Thread runner = null;
    private double pattern_of_each_class[][][]=new double[2][2][2];
    private int iterations=0;
    private int pattern_length=2;
    private int pattern_dimension=2;
    private int [] validNumberOfPatternPerClass=new int[2];
    private javax.swing.JTextArea errorWindow;
    private javax.swing.JTextArea saveFileWindow;
    private javax.swing.JComboBox jComboBox;
    private Vector prototypePropertiesList=null;
    private int qualifyWinnerCount=0;
    private int width=300;
    private int height=200;
    private int delay=1;
    private int algo=0;
    private int xAxis=0;
    private int yAxis=1;
    private int learning_persent_decrease=0;
    private int num_categories=2;
    private int num_prototypes_per_category= 1;
    private int grid_factor=10;
    private int total_mode=5000;
    private int total_cycles=20;
    private int total_mode_inc=50;
    private int total_cycles_inc=1;
    private int steps=4;
    private double PCT=0.5d;
    private int maxPersentageOfPoputationAllowedToDie=10;
    private double learning_rate_correct = 0.1;
    private double learning_rate_wrong = 0.00001;
    private double learning_rate_lambda = 0.00001;
    private boolean paint_background = false;
    private boolean paint_voronoi_background = false;
    private boolean paint_grid = false;
    private boolean paint_voronoi = false;
    private boolean paint_prototypes = true;
    private boolean paint_input = true;
    private boolean paint_border = true;
    private boolean withMeanDynamicAllocation= true;
    private boolean isKillingLoserPrototypesAllowed= false;
    private boolean normalizeLambda=true;
    private boolean paint_lambda=true;
    
    public int persentageOfTestExamples =95;
    public int numberOfDatasets=100;
    private String trainingfileName="";
    private String testingfileName="";
    private String trainingdir="";
    public StartGUI ()
    {
        try
        {
            initComponents ();
            initClassifier ();
            errorWindow= jTextArea3;
            jComboBox= jComboBox7;
            saveFileWindow=jTextArea2;
        }
        
        catch(Exception e)
        {
            if("Exceptions".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nCannot Initialize Window components: "+e.getMessage ());
        }
        
        try
        {
            Dimension screen = this.getToolkit ().getScreenSize ();
            this.setSize (screen.width, screen.height);
        }
        catch(Exception e)
        {
            this.setSize (800, 550);
            if("Exceptions".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nCannot set full screen mode: "+e.getMessage ());
        }
        SwingUtilities.updateComponentTreeUI (this);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents()//GEN-BEGIN:initComponents
    {
        jPanel22 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jSlider15 = new javax.swing.JSlider();
        jLabel19 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jSlider16 = new javax.swing.JSlider();
        jButton6 = new javax.swing.JButton();
        jPanel18 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jSlider11 = new javax.swing.JSlider();
        jPanel17 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jComboBox8 = new javax.swing.JComboBox();
        jPanel25 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jSlider8 = new javax.swing.JSlider();
        jTextField2 = new javax.swing.JTextField();
        jPanel26 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jSlider7 = new javax.swing.JSlider();
        jTextField3 = new javax.swing.JTextField();
        jPanel40 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jSlider12 = new javax.swing.JSlider();
        jTextField6 = new javax.swing.JTextField();
        jPanel21 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSlider1 = new javax.swing.JSlider();
        jTextField1 = new javax.swing.JTextField();
        jPanel30 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jSlider5 = new javax.swing.JSlider();
        jTextField7 = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jSlider2 = new javax.swing.JSlider();
        jTextField11 = new javax.swing.JTextField();
        jPanel28 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jSlider6 = new javax.swing.JSlider();
        jTextField5 = new javax.swing.JTextField();
        jPanel31 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jSlider4 = new javax.swing.JSlider();
        jSlider9 = new javax.swing.JSlider();
        jTextField8 = new javax.swing.JTextField();
        jPanel32 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jSlider13 = new javax.swing.JSlider();
        jSlider17 = new javax.swing.JSlider();
        jTextField9 = new javax.swing.JTextField();
        jPanel33 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jSlider14 = new javax.swing.JSlider();
        jSlider18 = new javax.swing.JSlider();
        jTextField10 = new javax.swing.JTextField();
        jPanel35 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jSlider10 = new javax.swing.JSlider();
        jTextField12 = new javax.swing.JTextField();
        jPanel38 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jSlider3 = new javax.swing.JSlider();
        jTextField4 = new javax.swing.JTextField();
        jPanel39 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jComboBox6 = new javax.swing.JComboBox();
        jPanel27 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        jPanel37 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        jComboBox5 = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        jToggleButton6 = new javax.swing.JToggleButton();
        jToggleButton5 = new javax.swing.JToggleButton();
        jPanel16 = new javax.swing.JPanel();
        jToggleButton4 = new javax.swing.JToggleButton();
        jToggleButton7 = new javax.swing.JToggleButton();
        jPanel1 = new javax.swing.JPanel();
        jToggleButton1 = new javax.swing.JToggleButton();
        jToggleButton8 = new javax.swing.JToggleButton();
        jPanel15 = new javax.swing.JPanel();
        jToggleButton3 = new javax.swing.JToggleButton();
        jToggleButton2 = new javax.swing.JToggleButton();
        jPanel20 = new javax.swing.JPanel();
        jToggleButton9 = new javax.swing.JToggleButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        jComboBox4 = new javax.swing.JComboBox();
        jPanel14 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jButton9 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jPanel34 = new javax.swing.JPanel();
        jButton10 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jTextField17 = new javax.swing.JTextField();
        jTextField18 = new javax.swing.JTextField();
        jPanel23 = new javax.swing.JPanel();
        jPanel36 = new javax.swing.JPanel();
        jPanel41 = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jPanel29 = new javax.swing.JPanel();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jPanel42 = new javax.swing.JPanel();
        jTextField14 = new javax.swing.JTextField();
        jTextField13 = new javax.swing.JTextField();
        jTextField15 = new javax.swing.JTextField();
        jTextField16 = new javax.swing.JTextField();
        jComboBox7 = new javax.swing.JComboBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jPanel24 = new javax.swing.JPanel();
        jButton13 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();

        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        setTitle("Cool-D 1.0");
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                exitForm(evt);
            }
        });

        jPanel22.setLayout(new java.awt.BorderLayout());

        jPanel10.setLayout(new java.awt.GridLayout(1, 0));

        jPanel10.setBackground(new java.awt.Color(204, 255, 153));
        jPanel22.add(jPanel10, java.awt.BorderLayout.CENTER);

        jPanel9.setLayout(new java.awt.BorderLayout());

        jSlider15.setMaximum(1);
        jSlider15.setPaintLabels(true);
        jSlider15.setPaintTicks(true);
        jSlider15.setSnapToTicks(true);
        jSlider15.setValue(0);
        jSlider15.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                x_dimention_jSlider15StateChanged(evt);
            }
        });

        jPanel9.add(jSlider15, java.awt.BorderLayout.CENTER);

        jLabel19.setText("0,1");
        jPanel9.add(jLabel19, java.awt.BorderLayout.WEST);

        jPanel22.add(jPanel9, java.awt.BorderLayout.NORTH);

        jPanel11.setLayout(new java.awt.BorderLayout());

        jSlider16.setMaximum(1);
        jSlider16.setOrientation(javax.swing.JSlider.VERTICAL);
        jSlider16.setPaintLabels(true);
        jSlider16.setPaintTicks(true);
        jSlider16.setSnapToTicks(true);
        jSlider16.setInverted(true);
        jSlider16.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                y_dimention_jSlider16StateChanged(evt);
            }
        });

        jPanel11.add(jSlider16, java.awt.BorderLayout.CENTER);

        jPanel22.add(jPanel11, java.awt.BorderLayout.WEST);

        jButton6.setBackground(new java.awt.Color(255, 255, 255));
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dgrlvq.jpg")));
        jPanel22.add(jButton6, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel22);

        jPanel18.setLayout(new java.awt.GridLayout(0, 1));

        jPanel8.setLayout(new java.awt.GridLayout(0, 1));

        jPanel19.setLayout(new java.awt.GridLayout(1, 0));

        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel22.setText("PlotTransformation");
        jPanel19.add(jLabel22);

        jSlider11.setMinimum(-100);
        jSlider11.setSnapToTicks(true);
        jSlider11.setValue(1);
        jSlider11.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                jSlider11StateChanged(evt);
            }
        });

        jPanel19.add(jSlider11);

        jPanel8.add(jPanel19);

        jPanel17.setLayout(new java.awt.GridLayout(1, 0));

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel17.setText("Co-Ordinate Plane");
        jPanel17.add(jLabel17);

        jComboBox8.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "+ +", "+ -", "- +", "- -" }));
        jComboBox8.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jComboBox8ActionPerformed(evt);
            }
        });

        jPanel17.add(jComboBox8);

        jPanel8.add(jPanel17);

        jPanel25.setLayout(new java.awt.GridLayout(1, 0));

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("height");
        jPanel25.add(jLabel4);

        jSlider8.setMajorTickSpacing(10);
        jSlider8.setMaximum(1000);
        jSlider8.setMinimum(1);
        jSlider8.setValue(200);
        jSlider8.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                height_jSlider8StateChanged(evt);
            }
        });

        jPanel25.add(jSlider8);

        jTextField2.setText("200");
        jTextField2.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                jTextField2KeyReleased(evt);
            }
        });

        jPanel25.add(jTextField2);

        jPanel8.add(jPanel25);

        jPanel26.setLayout(new java.awt.GridLayout(1, 0));

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("width");
        jPanel26.add(jLabel5);

        jSlider7.setMajorTickSpacing(10);
        jSlider7.setMaximum(1000);
        jSlider7.setMinimum(1);
        jSlider7.setValue(300);
        jSlider7.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                width_jSlider7StateChanged(evt);
            }
        });

        jPanel26.add(jSlider7);

        jTextField3.setText("300");
        jTextField3.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                jTextField3KeyReleased(evt);
            }
        });

        jPanel26.add(jTextField3);

        jPanel8.add(jPanel26);

        jPanel40.setLayout(new java.awt.GridLayout(1, 0));

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel18.setText("grid_factor");
        jPanel40.add(jLabel18);

        jSlider12.setMajorTickSpacing(1);
        jSlider12.setMinimum(1);
        jSlider12.setValue(10);
        jSlider12.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                grid_factor_jSlider12StateChanged(evt);
            }
        });

        jPanel40.add(jSlider12);

        jTextField6.setText("10");
        jTextField6.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                jTextField6KeyReleased(evt);
            }
        });

        jPanel40.add(jTextField6);

        jPanel8.add(jPanel40);

        jPanel21.setLayout(new java.awt.GridLayout(1, 0));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Delay in ms");
        jPanel21.add(jLabel1);

        jSlider1.setMajorTickSpacing(100);
        jSlider1.setMaximum(10000);
        jSlider1.setValue(100);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                jSlider1StateChanged(evt);
            }
        });

        jPanel21.add(jSlider1);

        jTextField1.setText("1");
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                jTextField1KeyReleased(evt);
            }
        });

        jPanel21.add(jTextField1);

        jPanel8.add(jPanel21);

        jPanel30.setLayout(new java.awt.GridLayout(1, 0));

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Modulus");
        jPanel30.add(jLabel9);

        jSlider5.setMajorTickSpacing(1000);
        jSlider5.setMaximum(60000);
        jSlider5.setMinimum(1);
        jSlider5.setValue(1000);
        jSlider5.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                total_iterations_jSlider5StateChanged(evt);
            }
        });

        jPanel30.add(jSlider5);

        jTextField7.setText("5000");
        jTextField7.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                jTextField7KeyReleased(evt);
            }
        });

        jPanel30.add(jTextField7);

        jLabel20.setText("Cycle");
        jPanel30.add(jLabel20);

        jSlider2.setMaximum(10000);
        jSlider2.setMinimum(1);
        jSlider2.setValue(200);
        jSlider2.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                jSlider2StateChanged(evt);
            }
        });

        jPanel30.add(jSlider2);

        jTextField11.setText("20");
        jTextField11.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                jTextField11KeyReleased(evt);
            }
        });

        jPanel30.add(jTextField11);

        jPanel8.add(jPanel30);

        jPanel28.setLayout(new java.awt.GridLayout(1, 0));

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("LR_decay_%age");
        jPanel28.add(jLabel7);

        jSlider6.setMajorTickSpacing(1);
        jSlider6.setValue(0);
        jSlider6.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                learning_persent_decrease_jSlider6StateChanged(evt);
            }
        });

        jPanel28.add(jSlider6);

        jTextField5.setText("0");
        jTextField5.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                jTextField5KeyReleased(evt);
            }
        });

        jPanel28.add(jTextField5);

        jPanel8.add(jPanel28);

        jPanel31.setLayout(new java.awt.GridLayout(1, 0));

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("LR_correct");
        jPanel31.add(jLabel10);

        jSlider4.setMajorTickSpacing(1000);
        jSlider4.setMaximum(100000);
        jSlider4.setValue(1000);
        jSlider4.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                learning_rate_jSlider4StateChanged(evt);
            }
        });

        jPanel31.add(jSlider4);

        jSlider9.setMaximum(0);
        jSlider9.setMinimum(-25000);
        jSlider9.setValue(-4604);
        jSlider9.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                jSlider9StateChanged(evt);
            }
        });

        jPanel31.add(jSlider9);

        jTextField8.setText("0.1");
        jTextField8.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                jTextField8KeyReleased(evt);
            }
        });

        jPanel31.add(jTextField8);

        jPanel8.add(jPanel31);

        jPanel32.setLayout(new java.awt.GridLayout(1, 0));

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("LR_wrong");
        jPanel32.add(jLabel2);

        jSlider13.setMajorTickSpacing(1000);
        jSlider13.setMaximum(100000);
        jSlider13.setValue(100);
        jSlider13.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                learning_rate_wrong_jSlider13StateChanged(evt);
            }
        });

        jPanel32.add(jSlider13);

        jSlider17.setMaximum(0);
        jSlider17.setMinimum(-25000);
        jSlider17.setValue(-6907);
        jSlider17.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                jSlider17StateChanged(evt);
            }
        });

        jPanel32.add(jSlider17);

        jTextField9.setText("0.00001");
        jTextField9.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                jTextField9KeyReleased(evt);
            }
        });

        jPanel32.add(jTextField9);

        jPanel8.add(jPanel32);

        jPanel33.setLayout(new java.awt.GridLayout(1, 0));

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("LR_lambda");
        jPanel33.add(jLabel3);

        jSlider14.setMajorTickSpacing(1000);
        jSlider14.setMaximum(100000);
        jSlider14.setValue(100);
        jSlider14.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                learning_rate_lambda_jSlider14StateChanged(evt);
            }
        });

        jPanel33.add(jSlider14);

        jSlider18.setMaximum(0);
        jSlider18.setMinimum(-25000);
        jSlider18.setValue(-6907);
        jSlider18.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                jSlider18StateChanged(evt);
            }
        });

        jPanel33.add(jSlider18);

        jTextField10.setText("0.00001");
        jTextField10.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                jTextField10KeyReleased(evt);
            }
        });

        jPanel33.add(jTextField10);

        jPanel8.add(jPanel33);

        jPanel35.setLayout(new java.awt.GridLayout(1, 0));

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel16.setText("prototypes per category");
        jPanel35.add(jLabel16);

        jSlider10.setMajorTickSpacing(10);
        jSlider10.setMaximum(1000);
        jSlider10.setMinimum(1);
        jSlider10.setValue(1);
        jSlider10.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                num_neurons_per_category_jSlider10StateChanged(evt);
            }
        });

        jPanel35.add(jSlider10);

        jTextField12.setText("1");
        jTextField12.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                jTextField12KeyReleased(evt);
            }
        });

        jPanel35.add(jTextField12);

        jPanel8.add(jPanel35);

        jPanel38.setLayout(new java.awt.GridLayout(1, 0));

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("qualifyWinnerCount");
        jPanel38.add(jLabel11);

        jSlider3.setMajorTickSpacing(1);
        jSlider3.setMaximum(32000);
        jSlider3.setMinimum(-32000);
        jSlider3.setValue(0);
        jSlider3.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                Cluster_jSlider3StateChanged(evt);
            }
        });

        jPanel38.add(jSlider3);

        jTextField4.setText("0");
        jTextField4.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                jTextField4KeyReleased(evt);
            }
        });

        jPanel38.add(jTextField4);

        jPanel8.add(jPanel38);

        jPanel39.setLayout(new java.awt.GridLayout(1, 0));

        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel21.setText("Dynamic Allocation");
        jPanel39.add(jLabel21);

        jComboBox6.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "by mean method", "by first come first served method" }));
        jComboBox6.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                dynamic_allocation_jComboBox6ActionPerformed(evt);
            }
        });

        jPanel39.add(jComboBox6);

        jPanel8.add(jPanel39);

        jPanel27.setLayout(new java.awt.GridLayout(1, 0));

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("distance");
        jPanel27.add(jLabel6);

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "DistanceGeneralizedWeightedEuclidean", "SimpleEuclideanDistance" }));
        jComboBox3.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                distance_jComboBox3ActionPerformed(evt);
            }
        });

        jPanel27.add(jComboBox3);

        jPanel8.add(jPanel27);

        jPanel37.setLayout(new java.awt.GridLayout(1, 0));

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("isKillingLoserPrototypesAllowed");
        jPanel37.add(jLabel12);

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "false", "true" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                PULLDOWN_jComboBox2ActionPerformed(evt);
            }
        });

        jPanel37.add(jComboBox2);

        jLabel15.setText("%ageToDie");
        jPanel37.add(jLabel15);

        jComboBox5.setModel(new javax.swing.DefaultComboBoxModel(new String[] {}));
        jComboBox5.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jComboBox5ActionPerformed(evt);
            }
        });

        jPanel37.add(jComboBox5);

        jPanel8.add(jPanel37);

        jPanel4.setLayout(new java.awt.GridLayout(1, 0));

        jToggleButton6.setSelected(true);
        jToggleButton6.setText("paint_input_points");
        jToggleButton6.setToolTipText("paint_input");
        jToggleButton6.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                paint_input_jToggleButton6StateChanged(evt);
            }
        });

        jPanel4.add(jToggleButton6);

        jToggleButton5.setSelected(true);
        jToggleButton5.setText("paint_neurons");
        jToggleButton5.setToolTipText("paint_neurons");
        jToggleButton5.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                paint_neurons_jToggleButton5StateChanged(evt);
            }
        });

        jPanel4.add(jToggleButton5);

        jPanel8.add(jPanel4);

        jPanel16.setLayout(new java.awt.GridLayout(1, 0));

        jToggleButton4.setText("paint_voronoi");
        jToggleButton4.setToolTipText("paint_voronoi");
        jToggleButton4.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                paint_voronoi_jToggleButton4StateChanged(evt);
            }
        });

        jPanel16.add(jToggleButton4);

        jToggleButton7.setText("paint_border");
        jToggleButton7.setToolTipText("paint_border");
        jToggleButton7.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                paint_border_jToggleButton7StateChanged(evt);
            }
        });

        jPanel16.add(jToggleButton7);

        jPanel8.add(jPanel16);

        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        jToggleButton1.setSelected(true);
        jToggleButton1.setText("no_path_plz");
        jToggleButton1.setToolTipText("paint_background");
        jToggleButton1.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                paint_background_jToggleButton1StateChanged(evt);
            }
        });

        jPanel1.add(jToggleButton1);

        jToggleButton8.setSelected(true);
        jToggleButton8.setText("normalized lambda");
        jToggleButton8.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                Normalized_Lambda_jToggleButton8StateChanged(evt);
            }
        });

        jPanel1.add(jToggleButton8);

        jPanel8.add(jPanel1);

        jPanel15.setLayout(new java.awt.GridLayout(1, 0));

        jToggleButton3.setText("paint_grid");
        jToggleButton3.setToolTipText("paint_grid");
        jToggleButton3.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                paint_grid_jToggleButton3StateChanged(evt);
            }
        });

        jPanel15.add(jToggleButton3);

        jToggleButton2.setText("paint_voronoi_background");
        jToggleButton2.setToolTipText("paint_voronoi_background");
        jToggleButton2.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                paint_voronoi_background_jToggleButton2StateChanged(evt);
            }
        });

        jPanel15.add(jToggleButton2);

        jPanel8.add(jPanel15);

        jPanel20.setLayout(new java.awt.GridLayout(1, 0));

        jToggleButton9.setText("paint lambda plot");
        jToggleButton9.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                jToggleButton9StateChanged(evt);
            }
        });

        jPanel20.add(jToggleButton9);

        jPanel8.add(jPanel20);

        jPanel5.setLayout(new java.awt.GridLayout(1, 0));

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Expo_Lambda");
        jPanel5.add(jLabel8);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        jComboBox1.setSelectedIndex(2);
        jComboBox1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jComboBox1ActionPerformed(evt);
            }
        });

        jPanel5.add(jComboBox1);

        jLabel14.setText("Expo_Cord");
        jPanel5.add(jLabel14);

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        jComboBox4.setSelectedIndex(2);
        jComboBox4.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jComboBox4ActionPerformed(evt);
            }
        });

        jPanel5.add(jComboBox4);

        jPanel8.add(jPanel5);

        jPanel18.add(jPanel8);

        jPanel14.setLayout(new java.awt.GridLayout(0, 1));

        jPanel3.setLayout(new java.awt.BorderLayout());

        jTextArea2.setBackground(new java.awt.Color(204, 153, 255));
        jTextArea2.setEditable(false);
        jScrollPane2.setViewportView(jTextArea2);

        jPanel3.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel14.add(jPanel3);

        jPanel2.setLayout(new java.awt.GridLayout(0, 1));

        jPanel6.setLayout(new java.awt.GridLayout(1, 0));

        jButton3.setBackground(new java.awt.Color(0, 102, 0));
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Start Training");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                START_jButton3MouseReleased(evt);
            }
        });

        jPanel6.add(jButton3);

        jButton4.setBackground(new java.awt.Color(204, 0, 0));
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Stop Training");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                STOP_jButton4MouseReleased(evt);
            }
        });

        jPanel6.add(jButton4);

        jButton5.setBackground(new java.awt.Color(153, 153, 0));
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("Reset Defaults");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                RESET_jButton5MouseReleased(evt);
            }
        });

        jPanel6.add(jButton5);

        jPanel2.add(jPanel6);

        jPanel12.setLayout(new java.awt.GridLayout(1, 0));

        jButton1.setBackground(new java.awt.Color(153, 0, 153));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Save Classifier As");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                jButton1MouseReleased(evt);
            }
        });

        jPanel12.add(jButton1);

        jButton7.setBackground(new java.awt.Color(153, 102, 0));
        jButton7.setForeground(new java.awt.Color(255, 255, 255));
        jButton7.setText("Load Test File");
        jButton7.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                jButton7MouseReleased(evt);
            }
        });

        jPanel12.add(jButton7);

        jPanel2.add(jPanel12);

        jPanel13.setLayout(new java.awt.GridLayout(1, 0));

        jButton2.setBackground(new java.awt.Color(102, 102, 255));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Load Pattern");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                jButton2MouseReleased(evt);
            }
        });

        jPanel13.add(jButton2);

        jButton8.setBackground(new java.awt.Color(0, 102, 102));
        jButton8.setForeground(new java.awt.Color(255, 255, 255));
        jButton8.setText("Load Classifier");
        jButton8.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                jButton8MouseReleased(evt);
            }
        });

        jPanel13.add(jButton8);

        jPanel2.add(jPanel13);

        jPanel7.setLayout(new java.awt.GridLayout(1, 0));

        jButton9.setBackground(new java.awt.Color(153, 204, 0));
        jButton9.setForeground(new java.awt.Color(255, 255, 255));
        jButton9.setText("Load File to Classify");
        jButton9.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                jButton9MouseReleased(evt);
            }
        });

        jPanel7.add(jButton9);

        jButton11.setBackground(new java.awt.Color(255, 0, 102));
        jButton11.setForeground(new java.awt.Color(255, 255, 255));
        jButton11.setText("Save Classified Vectors As");
        jButton11.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                jButton11MouseReleased(evt);
            }
        });

        jPanel7.add(jButton11);

        jPanel2.add(jPanel7);

        jPanel34.setLayout(new java.awt.GridLayout(1, 0));

        jButton10.setBackground(new java.awt.Color(204, 51, 0));
        jButton10.setForeground(new java.awt.Color(255, 255, 255));
        jButton10.setText("Automatic");
        jButton10.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                jButton10MouseReleased(evt);
            }
        });

        jPanel34.add(jButton10);

        jButton12.setText("Algo");
        jButton12.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                jButton12MouseReleased(evt);
            }
        });

        jPanel34.add(jButton12);

        jTextField17.setText("95");
        jTextField17.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                jTextField17KeyReleased(evt);
            }
        });

        jPanel34.add(jTextField17);

        jTextField18.setText("100");
        jTextField18.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                jTextField18KeyReleased(evt);
            }
        });

        jPanel34.add(jTextField18);

        jPanel2.add(jPanel34);

        jPanel14.add(jPanel2);

        jPanel23.setLayout(new java.awt.BorderLayout());

        jPanel36.setLayout(new java.awt.GridLayout(1, 0));

        jPanel41.setLayout(new java.awt.GridLayout(0, 1));

        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel24.setText("Cycle++");
        jPanel41.add(jLabel24);

        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel23.setText("Modulus++");
        jPanel41.add(jLabel23);

        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel25.setText("Steps");
        jPanel41.add(jLabel25);

        jCheckBox1.setText("With Probability Threshold");
        jCheckBox1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jCheckBox1.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel41.add(jCheckBox1);

        jCheckBox4.setText("Auto Prototype addition");
        jPanel41.add(jCheckBox4);

        jCheckBox3.setText("Stop when classified");
        jPanel41.add(jCheckBox3);

        jPanel29.setLayout(new java.awt.GridLayout(1, 0));

        jButton14.setText("Set Training data");
        jButton14.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                jButton14MouseReleased(evt);
            }
        });

        jPanel29.add(jButton14);

        jButton15.setText("Set Testing Data");
        jButton15.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                jButton15MouseReleased(evt);
            }
        });

        jPanel29.add(jButton15);

        jPanel41.add(jPanel29);

        jPanel36.add(jPanel41);

        jPanel42.setLayout(new java.awt.GridLayout(0, 1));

        jTextField14.setText("1");
        jTextField14.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                jTextField14KeyReleased(evt);
            }
        });

        jPanel42.add(jTextField14);

        jTextField13.setText("50");
        jTextField13.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                jTextField13KeyReleased(evt);
            }
        });

        jPanel42.add(jTextField13);

        jTextField15.setText("4");
        jTextField15.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                jTextField15KeyReleased(evt);
            }
        });

        jPanel42.add(jTextField15);

        jTextField16.setText("0.5");
        jTextField16.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                jTextField16KeyReleased(evt);
            }
        });

        jPanel42.add(jTextField16);

        jComboBox7.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Events", "Epochs", "Exceptions" }));
        jComboBox7.setSelectedIndex(1);
        jComboBox7.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jComboBox7ActionPerformed(evt);
            }
        });

        jPanel42.add(jComboBox7);

        jCheckBox2.setText("Debug");
        jPanel42.add(jCheckBox2);

        jPanel24.setLayout(new java.awt.GridLayout(1, 0));

        jButton13.setText("Run DGRLVQ");
        jButton13.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                jButton13MouseReleased(evt);
            }
        });

        jPanel24.add(jButton13);

        jPanel42.add(jPanel24);

        jPanel36.add(jPanel42);

        jPanel23.add(jPanel36, java.awt.BorderLayout.CENTER);

        jTextArea3.setBackground(new java.awt.Color(0, 0, 0));
        jTextArea3.setForeground(new java.awt.Color(0, 255, 51));
        jTextArea3.setLineWrap(true);
        jTextArea3.setText(">System Consol, wait... ready now");
        jTextArea3.setWrapStyleWord(true);
        jScrollPane3.setViewportView(jTextArea3);

        jPanel23.add(jScrollPane3, java.awt.BorderLayout.SOUTH);

        jPanel14.add(jPanel23);

        jPanel18.add(jPanel14);

        getContentPane().add(jPanel18);

        pack();
    }//GEN-END:initComponents
    
    private void jButton15MouseReleased (java.awt.event.MouseEvent evt)//GEN-FIRST:event_jButton15MouseReleased
    {//GEN-HEADEREND:event_jButton15MouseReleased
        FileDialog fileDialog = new FileDialog (this, "Set Testing Pattern File...", FileDialog.LOAD);
        fileDialog.show ();
        if (fileDialog.getFile () == null)
        {
            return;
        }
        testingfileName = fileDialog.getDirectory () + File.separator + fileDialog.getFile ();
        this.saveFileWindow.setText ("test file set: "+fileDialog.getFile ()+"\nPath: "+testingfileName );
        
    }//GEN-LAST:event_jButton15MouseReleased
    
    private void jButton14MouseReleased (java.awt.event.MouseEvent evt)//GEN-FIRST:event_jButton14MouseReleased
    {//GEN-HEADEREND:event_jButton14MouseReleased
        FileDialog fileDialog = new FileDialog (this, "Set Training Pattern File...", FileDialog.LOAD);
        fileDialog.show ();
        if (fileDialog.getFile () == null)
        {
            return;
        }
        trainingfileName = fileDialog.getDirectory () + File.separator + fileDialog.getFile ();
        this.saveFileWindow.setText ("train file set: "+fileDialog.getFile ()+"\nPath: "+trainingfileName );trainingdir = fileDialog.getDirectory ();
        trainingdir=trainingdir.replace ('\\','/');
    }//GEN-LAST:event_jButton14MouseReleased
    
    private void jButton13MouseReleased (java.awt.event.MouseEvent evt)//GEN-FIRST:event_jButton13MouseReleased
    {//GEN-HEADEREND:event_jButton13MouseReleased
        Vector testVector=new Vector ();
        Vector trainVector=new Vector ();
        int noOfclasses=0;
        String str = new String ();
        try
        {
            RandomAccessFile file = new RandomAccessFile (trainingfileName, "r");
            System.out.println ("Please wait while training file is loaded: ");
            while(file.getFilePointer () < file.length ())
            {
                str = file.readLine ();
                System.out.print ("I");
                if(str!=null && str.length ()>5)
                {
                    String values[]= str.split (" ");
                    if(noOfclasses<Integer.valueOf (values[values.length-1]).intValue ())
                    {
                        noOfclasses=Integer.valueOf (values[values.length-1]).intValue ();
                    }
                    trainVector.addElement (str);
                }
            }
            file.close ();
            num_categories=noOfclasses+1;
            System.out.println ("\nNumber of classes= "+num_categories+" training examples="+trainVector.size ());
        }
        catch(Exception e)
        {
            e.printStackTrace ();
        }
        
        try
        {
            RandomAccessFile file = new RandomAccessFile (testingfileName, "r");
            System.out.println ("Please wait while testing file is loaded: ");
            while(file.getFilePointer () < file.length ())
            {
                str = file.readLine ();
                System.out.print ("I");
                if(str!=null && str.length ()>5)
                {
                    testVector.addElement (str);
                }
            }
            file.close ();
            
            System.out.println ("\nNumber of classes= "+num_categories+" testing examples="+testVector.size ());
        }
        catch(Exception e)
        {
            e.printStackTrace ();
        }
        
        Vector examplesOfCategory[]=new Vector[num_categories];        
        for(int i=0;i<examplesOfCategory.length;i++)
        {
            examplesOfCategory[i]=new Vector ();
        }
        ////////////////////////////////////////////
        
        str = "";
        int totalVectors=0;
        int errorPatternCount=0;
        double errorPersentage=0.;
        double successRate=0.;
        double sensitivity=0.;
        double specificity=0.;
        double PPV= 0.;
        double NPV= 0.;
        int number=0;
        int numberOfTestExamples=0;
        String results="";
        numberOfTestExamples=testVector.size ();
        System.out.println ("No of Training Vectors="+trainVector.size ()+"  No of testing vectors="+testVector.size ()+"");
        System.out.println ("%TrainingExamples="+((100*trainVector.size ())/(trainVector.size ()+testVector.size ()))+"  %TestExamples="+((100*testVector.size ()/(trainVector.size ()+testVector.size ()))));
        
        System.out.println ("Catagory containers created. Filling up containers:");
        for(int i=0;i<trainVector.size ();i++)
        {
            System.out.print ("I");
            String values[]= trainVector.elementAt (i).toString ().split (" ");
            examplesOfCategory[Integer.valueOf (values[values.length-1]).intValue ()].addElement (trainVector.elementAt (i).toString ());
        }
        System.out.println ();
        int largest=0;
        int t=0;
        for(int i=0;i<examplesOfCategory.length;i++)
        {
            System.out.println ("Size of container["+i+"]="+examplesOfCategory[i].size ());
            if(t<examplesOfCategory[i].size ())
            {
                t=examplesOfCategory[i].size ();
                largest=i;
            }
        }
        int largestSize=examplesOfCategory[largest].size ();
        System.out.println ("<---Largest container["+largest+"]="+largestSize);
        
        for(int i=0;i<examplesOfCategory.length;i++)
        {
            int diff=largestSize-examplesOfCategory[i].size ();
            System.out.println ("Equalization of container["+i+"] from "+examplesOfCategory[i].size ()+" to "+largestSize+" diff="+diff);
            for(int j=0;j<diff;j++)
            {
                System.out.print ("I");
                trainVector.addElement (examplesOfCategory[i].elementAt (j%(examplesOfCategory[i].size ())).toString ());
            }
            System.out.println ();
        }
        System.out.println ("\nNumber of classes= "+num_categories+" New Pattern size="+trainVector.size ());
        
        ////////////////////////////////////////////
        
        System.out.println ("Allocating memory for pattern Matrix: ");
        try
        {
            pattern_length=trainVector.size ();
            StringTokenizer st=new StringTokenizer (trainVector.firstElement ().toString (), " ");
            pattern_dimension=st.countTokens ()-1;
            String fileLine= "";
            double [][] pattern=new double[pattern_dimension+1][pattern_length];
            for(int x=0; x<trainVector.size (); x++)
            {
                fileLine= (String)trainVector.elementAt (x).toString ();
                System.out.print ("I");
                if(!fileLine.startsWith ("#") || !fileLine.startsWith ("@") )
                {
                    String values[]=fileLine.split (" ");
                    for(int j=0;j<values.length;j++)
                    {
                        pattern[j][x]= (double) Double.valueOf (values[j]).doubleValue ();
                        
                        //System.out.print(" "+pattern[j][x]);
                    }
                    //System.out.println();
                }
            }
            
            ////////////////////////////////////////////
            
            System.out.println ("\nPattern Matrix[ "+(pattern_dimension+1)+" X "+pattern_length+" ]");
            
            int numberOfElementsPerClass[]=new int[num_categories];
            for(int i=0;i<pattern_length; i++)
            {
                numberOfElementsPerClass[(int)pattern [pattern_dimension][i]]++;
                //System.out.println(numberOfElementsPerClass[(int)pattern [pattern_dimension][i]]);
            }
            largest=0;
            t=0;
            for(int i=0;i<numberOfElementsPerClass.length;i++)
            {
                if(t<numberOfElementsPerClass[i])
                {
                    t=numberOfElementsPerClass[i];
                    largest=i;
                }
            }
            pattern_of_each_class=new double[num_categories][pattern_dimension][numberOfElementsPerClass[largest]];
            
            validNumberOfPatternPerClass=new int[num_categories];
            
            for(int i=0;i<numberOfElementsPerClass.length;i++)
            {
                validNumberOfPatternPerClass[i]=numberOfElementsPerClass[i];
            }
            
            for(int i=0;i<validNumberOfPatternPerClass.length;i++)
            {
                System.out.println ("Category= "+i+"  numberOfElements= "+validNumberOfPatternPerClass[i]);
            }
            System.out.println ("num_categories="+num_categories+" pattern_dimension="+pattern_dimension+" pattern_length="+pattern_length);
            System.out.println (largest+" <--largest");
            System.out.println ("3D Pattern Matrix["+ pattern_of_each_class.length+" X "+pattern_of_each_class[0].length+" X "+pattern_of_each_class[0][0].length+" ]");
            
            try
            {
                for(int k=0 ; k<pattern_length ;k++)
                {
                    int category=(int)pattern[pattern_dimension][k];
                    int i=numberOfElementsPerClass[category]-1;
                    if(i>=0)
                    {
                        for(int j=0; j<pattern_dimension; j++)
                        {
                            double value=pattern[j][k];
                            pattern_of_each_class[category][j][i]=value;
                            //System.out.print(" "+pattern_of_each_class[category][j][i]+" "+category);
                            //if(value>0.)
                            //{
                            //  pattern_of_each_class[category][j][i]=StrictMath.pow ((value+20.),2.7);
                            //}
                            //else
                            //{
                            //  pattern_of_each_class[category][j][i]=value;
                            //}
                        }
                        numberOfElementsPerClass[category]--;
                    }
                    //System.out.println(" ");
                }
                
                lambdas= new double[pattern_dimension];
                //System.out.print("Lambda= ");
                for(int i=0;i<pattern_dimension;i++)
                {
                    lambdas[i]=1.0/(double)pattern_dimension;
                    //lambdas[i]=Math.sqrt (1.0/pattern_dimension);
                    //System.out.print(" "+lambdas[i]);
                }
                System.out.println ("init Lambda_i="+lambdas[0]);
            }
            catch(Exception e)
            {
                e.printStackTrace ();
            }
        }
        catch(Exception e)
        {
            e.printStackTrace ();
        }
        
        try
        {
            for(int c=1;c<=total_cycles_inc;c++)
            {
                int temp =total_mode;
                totalVectors=0;
                errorPatternCount=0;
                errorPersentage=0.;
                successRate=0.;
                sensitivity=0.;
                specificity=0.;
                PPV= 0.;
                NPV= 0.;
                number=0;
                numberOfTestExamples=0;
                results="";
                for(int m=1;m<=steps;m++)
                {
                    FileOutputStream fos=new FileOutputStream (trainingdir+"FixedSet_log_M="+total_mode+"_C="+total_cycles+"_P="+persentageOfTestExamples+"_D="+numberOfDatasets+".html",false);
                    fos.write (("<html><head><meta content=\"Gulraj Singh Mrok\" name=\"author\"></head><body><table style=\"width: 100%; text-align: left;\" border=\"1\" cellspacing=\"2\" cellpadding=\"2\"><tbody><tr><td style=\"vertical-align: top;\"><small>Total Vectors</small><br></td><td style=\"vertical-align: top;\"><small>Error Vectors</small><br></td><td style=\"vertical-align: top;\"><small>Error %</small><br></td><td style=\"vertical-align: top;\"><small>Success %</small><br></td><td style=\"vertical-align: top;\"><small>Sensitivity</small><br></td><td style=\"vertical-align: top;\"><small>Specificity</small><br></td><td style=\"vertical-align: top;\"><small>PPV</small><br></td><td style=\"vertical-align: top;\"><small>NPV</small><br></td></tr>").getBytes ());
                    System.out.println ("####################################################");
                    for(int f=0;f<numberOfDatasets;f++)
                    {
                        Vector test_vectors= new Vector ();
                        for(int i=0;i<testVector.size ();i++)
                        {
                            test_vectors.addElement (testVector.elementAt (i));
                        }
                        numberOfTestExamples=test_vectors.size ();
                        //////////////////////////////////////////////
                        System.out.println (" ----------------- ");
                        try
                        {
                            distanceRef.setLambdas (lambdas);
                            classifier = new DGRLVQClassifier (
                            num_prototypes_per_category,
                            pattern_of_each_class,
                            validNumberOfPatternPerClass,
                            learning_rate_correct,
                            learning_rate_wrong,
                            learning_rate_lambda,
                            learning_persent_decrease,
                            normalizeLambda,
                            withMeanDynamicAllocation,
                            isKillingLoserPrototypesAllowed,
                            qualifyWinnerCount,
                            maxPersentageOfPoputationAllowedToDie,
                            num_categories,
                            pattern_length,
                            pattern_dimension,
                            distanceRef);
                            int tm=total_mode;
                            int tc=total_cycles;
                            iterations= tm*tc;
                            DistanceGeneralizedWeightedEuclidean.flag=false;
                            
                            ///////////////////////////
                            int x=0;
                            if(jCheckBox4.isSelected ())
                            {
                                double error[]=new double[25];
                                for(int g=0;g<25;g++)
                                {
                                    error[g]=1.;
                                }
                                while(tm>0)
                                {
                                    classifier.update ();
                                    classifier.updateLearning ();
                                    
                                    double errorCount=classifier.getMissclassificationErrorValue ();
                                    if(errorCount<=0.005)
                                    {
                                        tm=-1;
                                        System.out.println ("At modulus="+tm+" errorCount="+errorCount+"classifier is ready");
                                    }
                                    else
                                    {
                                        System.out.print ("["+errorCount+"}");
                                        for(int g=0;g<24;g++)
                                        {
                                            error[g]=error[g+1];
                                        }
                                        error[24]=errorCount;
                                        if((error[0]==error[24] || error[0]<error[24]) && tc>=0)
                                        {
                                            classifier.removeLosers ();
                                            classifier.addPrototypeDynamically ();
                                            for(int g=0;g<25;g++)
                                            {
                                                error[g]=1.;
                                            }
                                            tc--;
                                        }
                                        tm--;
                                    }
                                }
                            }
                            //////////////////////////
                            else
                            {
                                while(tc>0)
                                {
                                    while (tm>0)
                                    {
                                        tm--;
                                        iterations--;
                                        classifier.update ();
                                        classifier.updateLearning ();
                                        x--;
                                        if(x<=0)
                                        {
                                            DistanceGeneralizedWeightedEuclidean.flag=true;
                                            x=100;
                                        }
                                        if(tm<= 0)
                                        {
                                            if(tc>1)
                                            {
                                                classifier.removeLosers ();
                                                classifier.addPrototypeDynamically ();
                                            }
                                        }
                                    }
                                    tc--;
                                    tm=total_mode;
                                }
                                /*
                                double lamb[]=this.distanceRef.getLambdas ();
                                System.out.println ();
                                //double lambdaIntValue= Math.sqrt (1.0/pattern_dimension);
                                double lambdaIntValue= 1.0/(double)pattern_dimension;
                                for (int i = 0; i < lamb.length; i++)
                                {
                                    System.out.print (" "+lamb[i]);
                                    if(lamb[i] <= lambdaIntValue)
                                    {
                                        lamb[i]=0.;
                                    }
                                }
                                this.distanceRef.setLambdas (lamb);
                                System.out.println ("\n\n\nThreshold :: "+lambdaIntValue);
                                for (int i = 0; i < lamb.length; i++)
                                {
                                    System.out.print (" "+lamb[i]);
                                }
                                System.out.println ();
                                 
                                for(int i=0;i<2000;i++)
                                {
                                    classifier.update ();
                                    classifier.updateLearning ();
                                    x--;
                                    if(x<=0)
                                    {
                                        DistanceGeneralizedWeightedEuclidean.flag=true;
                                        x=100;
                                    }
                                }
                                 */
                            }
                        }
                        catch(Exception e)
                        {
                            e.printStackTrace ();
                        }
                        
                        //save clf
                        classifier = new DGRLVQClassifier (classifier.getAllPrototypePropertiesVector (this.total_mode,this.total_cycles));
                        
                        //load test file
                        
                        if(jCheckBox1.isSelected ())
                        {//System.out.println ("#");
                            results=classifier.testPatternWithThresholdAndNoDetails (test_vectors,PCT);
                        }
                        else
                        {//System.out.println ("*");
                            results=classifier.testPatternWithNoDetails (test_vectors);
                        }
                        System.out.println (results);
                        StringTokenizer s=new StringTokenizer (results,"\t");
                        try
                        {
                            int tv=(int)Integer.parseInt (s.nextToken ());
                            int epc=(int)Integer.parseInt (s.nextToken ());
                            double ep=(double)Double.parseDouble (s.nextToken ());
                            double sr=(double)Double.parseDouble (s.nextToken ());
                            double sn=(double)Double.parseDouble (s.nextToken ());
                            double sp=(double)Double.parseDouble (s.nextToken ());
                            double ppv=(double)Double.parseDouble (s.nextToken ());
                            double npv=(double)Double.parseDouble (s.nextToken ());
                            
                            fos.write (("<tr><td style=\"vertical-align: top;\"><small>"+tv+"</small><br></td><td style=\"vertical-align: top;\"><small>"+epc+"</small><br></td><td style=\"vertical-align: top;\"><small>"+ep+"</small><br></td><td style=\"vertical-align: top;\"><small>"+sr+"</small><br></td><td style=\"vertical-align: top;\"><small>"+sn+"</small><br></td><td style=\"vertical-align: top;\"><small>"+sp+"</small><br></td><td style=\"vertical-align: top;\"><small>"+ppv+"</small><br></td><td style=\"vertical-align: top;\"><small>"+npv+"</small><br></td></tr>").getBytes ());
                            //fos.write (results.getBytes ());
                            //fos.write (("\n").getBytes ());
                            System.out.println ();
                            System.out.println (f+" Testing done. See "+"FixedTrainingSet_log_M="+total_mode+"_C="+total_cycles+"_P="+persentageOfTestExamples+"_D="+numberOfDatasets+".txt"+" for details.");
                            System.out.println ("\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
                            totalVectors+=tv;
                            errorPatternCount+=epc;
                            errorPersentage+=ep;
                            successRate+=sr;
                            sensitivity+=sn;
                            specificity+=sp;
                            PPV+= ppv;
                            NPV+= npv;
                        }
                        catch(Exception e)
                        {
                            e.printStackTrace ();
                        }
                    }
                    System.out.println ("total/numberOfDatasets: "+totalVectors+"/"+numberOfDatasets+" "+errorPatternCount+"/"+numberOfDatasets+" "+errorPersentage+"/"+numberOfDatasets+" "+successRate+"/"+numberOfDatasets+" "+sensitivity+"/"+numberOfDatasets+" "+specificity+"/"+numberOfDatasets+" "+PPV+"/"+numberOfDatasets+" "+NPV+"/"+numberOfDatasets);
                    totalVectors=totalVectors/numberOfDatasets;
                    errorPatternCount=errorPatternCount/numberOfDatasets;
                    errorPersentage=errorPersentage/numberOfDatasets;
                    successRate=successRate/numberOfDatasets;
                    sensitivity=sensitivity/numberOfDatasets;
                    specificity=specificity/numberOfDatasets;
                    PPV=PPV/numberOfDatasets;
                    NPV=NPV/numberOfDatasets;
                    //String rs="\n"+totalVectors+"\t"+errorPatternCount+"\t"+errorPersentage+"\t"+successRate+"\t"+(sensitivity*100)+"\t"+(specificity*100)+"\t"+(PPV*100)+"\t"+(NPV*100)+"\n";
                    System.out.println ("total/numberOfDatasets: "+totalVectors+"\t"+errorPatternCount+"\t"+errorPersentage+"\t"+successRate+"\t"+sensitivity+"\t"+specificity+"\t"+PPV+"\t"+NPV);
                    //fos.write (rs.getBytes ());
                    fos.write (("<tr><td style=\"vertical-align: top;\"><small><font color=\"#800000\">"+totalVectors+"/"+numberOfTestExamples+"="+(((double)totalVectors/(double)numberOfTestExamples)*100.)+"%</font></small><br></td><td style=\"vertical-align: top;\"><small><font color=\"#800000\">"+errorPatternCount+"</font></small><br></td><td style=\"vertical-align: top;\"><small><font color=\"#800000\">"+errorPersentage+"</font></small><br></td><td style=\"vertical-align: top;\"><small><font color=\"#800000\">"+successRate+"</font></small><br></td><td style=\"vertical-align: top;\"><small><font color=\"#800000\">"+sensitivity+"</font></small><br></td><td style=\"vertical-align: top;\"><small><font color=\"#800000\">"+specificity+"</font></small><br></td><td style=\"vertical-align: top;\"><small><font color=\"#800000\">"+PPV+"</font></small><br></td><td style=\"vertical-align: top;\"><small><font color=\"#800000\">"+NPV+"</font></small><br></td></tr></tbody></table><br>").getBytes ());
                    fos.write (("<br>distanceRef="+distanceRef.getName ()+"<br>qualifyWinnerCount="+qualifyWinnerCount+"<br>PCT="+PCT+"("+String.valueOf (jCheckBox1.isSelected ())+")"+"<br>maxPersentageOfPoputationAllowedToDie="+maxPersentageOfPoputationAllowedToDie+"<br>learning_persent_decrease="+learning_persent_decrease+"<br>learning_rate_correct="+learning_rate_correct+"<br>learning_rate_wrong="+learning_rate_wrong+"<br>learning_rate_lambda="+learning_rate_lambda+"<br>withMeanDynamicAllocation="+withMeanDynamicAllocation+"<br>isKillingLoserPrototypesAllowed="+isKillingLoserPrototypesAllowed+"<br>normalizeLambda="+String.valueOf (normalizeLambda)+"<br>numberOfDatasets="+numberOfDatasets+"<br>"+"Expo_lambda="+(jComboBox1.getSelectedIndex ())+"<br>ExpoCoordinate="+(jComboBox4.getSelectedIndex ())+"<br>pattern_dimension="+pattern_dimension+"<br>num_categories="+num_categories+"<br>").getBytes ());
                    fos.write ("</body></html>".getBytes ());
                    fos.close ();
                    total_mode=total_mode+total_mode_inc;
                }
                total_mode=temp;
                total_cycles++;
            }
        }
        catch(Exception e)
        {
            e.printStackTrace ();
        }
        System.out.println ("Done.");
        
    }//GEN-LAST:event_jButton13MouseReleased
    
    private void jButton12MouseReleased (java.awt.event.MouseEvent evt)//GEN-FIRST:event_jButton12MouseReleased
    {//GEN-HEADEREND:event_jButton12MouseReleased
        FileDialog fileDialog = new FileDialog (this, "Open directory for D-Runs...", FileDialog.LOAD);
        fileDialog.show ();
        if (fileDialog.getFile () == null)
        {
            return;
        }
        
        String fileName = fileDialog.getDirectory () + File.separator + fileDialog.getFile ();
        Vector fileVector=new Vector ();
        int noOfclasses=0;
        String str = new String ();
        try
        {
            RandomAccessFile file = new RandomAccessFile (fileName, "r");
            System.out.println ("Please wait while file is loaded: ");
            while(file.getFilePointer () < file.length ())
            {
                str = file.readLine ();
                System.out.print ("I");
                if(str!=null && str.length ()>5)
                {
                    String values[]= str.split (" ");
                    if(noOfclasses<Integer.valueOf (values[values.length-1]).intValue ())
                    {
                        noOfclasses=Integer.valueOf (values[values.length-1]).intValue ();
                        
                    }
                    fileVector.addElement (str);
                }
            }
            file.close ();
            num_categories=noOfclasses+1;
            System.out.println ("\nNumber of classes= "+num_categories+" Pattern size="+fileVector.size ());
        }
        catch(Exception e)
        {
            e.printStackTrace ();
        }
        Vector examplesOfCategory[]=new Vector[num_categories];
        Vector testVector=new Vector ();
        Vector trainVector=new Vector ();
        for(int i=0;i<examplesOfCategory.length;i++)
        {
            examplesOfCategory[i]=new Vector ();
        }
        ////////////////////////////////////////////
        String dir = fileDialog.getDirectory ();
        dir=dir.replace ('\\','/');
        str = "";
        int totalVectors=0;
        int errorPatternCount=0;
        double errorPersentage=0.;
        double successRate=0.;
        double sensitivity=0.;
        double specificity=0.;
        double PPV= 0.;
        double NPV= 0.;
        int number=0;
        int numberOfTestExamples=0;
        String results="";
        try
        {
            for(int c=1;c<=total_cycles_inc;c++)
            {
                int temp =total_mode;
                totalVectors=0;
                errorPatternCount=0;
                errorPersentage=0.;
                successRate=0.;
                sensitivity=0.;
                specificity=0.;
                PPV= 0.;
                NPV= 0.;
                number=0;
                numberOfTestExamples=0;
                results="";
                for(int m=1;m<=steps;m++)
                {
                    FileOutputStream fos=new FileOutputStream (dir+"log_M="+total_mode+"_C="+total_cycles+"_P="+persentageOfTestExamples+"_D="+numberOfDatasets+".html",false);
                    fos.write (("<html><head><meta content=\"Gulraj Singh Mrok\" name=\"author\"></head><body><table style=\"width: 100%; text-align: left;\" border=\"1\" cellspacing=\"2\" cellpadding=\"2\"><tbody><tr><td style=\"vertical-align: top;\"><small>Total Vectors</small><br></td><td style=\"vertical-align: top;\"><small>Error Vectors</small><br></td><td style=\"vertical-align: top;\"><small>Error %</small><br></td><td style=\"vertical-align: top;\"><small>Success %</small><br></td><td style=\"vertical-align: top;\"><small>Sensitivity</small><br></td><td style=\"vertical-align: top;\"><small>Specificity</small><br></td><td style=\"vertical-align: top;\"><small>PPV</small><br></td><td style=\"vertical-align: top;\"><small>NPV</small><br></td></tr>").getBytes ());
                    System.out.println ("####################################################");
                    for(int f=0;f<numberOfDatasets;f++)
                    {
                        testVector=new Vector ();
                        trainVector=new Vector ();
                        for(int i=0;i<examplesOfCategory.length;i++)
                        {
                            examplesOfCategory[i]=new Vector ();
                        }
                        
                        for( int i=0; i<fileVector.size ();i++)
                        {
                            System.out.print ("I");
                            String values[]= fileVector.elementAt (i).toString ().split (" ");
                            examplesOfCategory[Integer.valueOf (values[values.length-1]).intValue ()].addElement (fileVector.elementAt (i).toString ());
                        }
                        System.out.println ();
                        for(int i=0;i<examplesOfCategory.length;i++)
                        {
                            number=((examplesOfCategory[i].size ())*persentageOfTestExamples)/100;
                            for(int j=0;j<number;j++)
                            {
                                int index=(int)(Math.random ()*examplesOfCategory[i].size ());
                                testVector.addElement (examplesOfCategory[i].elementAt (index).toString ());
                                examplesOfCategory[i].removeElementAt (index);
                            }
                        }
                        for(int i=0;i<examplesOfCategory.length;i++)
                        {
                            while(!examplesOfCategory[i].isEmpty ())
                            {
                                trainVector.addElement (examplesOfCategory[i].firstElement ().toString ());
                                examplesOfCategory[i].removeElementAt (0);
                            }
                        }
                        numberOfTestExamples=testVector.size ();
                        System.out.println ("No of Training Vectors="+trainVector.size ()+"  No of testing vectors Testing="+testVector.size ()+"");
                        System.out.println ("%TrainingExamples="+(100-persentageOfTestExamples)+"  %TestExamples="+persentageOfTestExamples);
                        ////////////////////////////////////////////
                /*
                Vector v[]=new Vector[num_categories];
                for(int i=0;i<v.length;i++)
                {
                    v[i]=new Vector ();
                }
                 */
                        System.out.println ("Catagory containers created. Filling up containers:");
                        for(int i=0;i<trainVector.size ();i++)
                        {
                            System.out.print ("I");
                            String values[]= trainVector.elementAt (i).toString ().split (" ");
                            examplesOfCategory[Integer.valueOf (values[values.length-1]).intValue ()].addElement (trainVector.elementAt (i).toString ());
                        }
                        System.out.println ();
                        int largest=0;
                        int t=0;
                        for(int i=0;i<examplesOfCategory.length;i++)
                        {
                            System.out.println ("Size of container["+i+"]="+examplesOfCategory[i].size ());
                            if(t<examplesOfCategory[i].size ())
                            {
                                t=examplesOfCategory[i].size ();
                                largest=i;
                            }
                        }
                        int largestSize=examplesOfCategory[largest].size ();
                        System.out.println ("<---Largest container["+largest+"]="+largestSize);
                        
                        for(int i=0;i<examplesOfCategory.length;i++)
                        {
                            int diff=largestSize-examplesOfCategory[i].size ();
                            System.out.println ("Equalization of container["+i+"] from "+examplesOfCategory[i].size ()+" to "+largestSize+" diff="+diff);
                            for(int j=0;j<diff;j++)
                            {
                                System.out.print ("I");
                                trainVector.addElement (examplesOfCategory[i].elementAt (j%(examplesOfCategory[i].size ())).toString ());
                            }
                            System.out.println ();
                        }
                        System.out.println ("\nNumber of classes= "+num_categories+" New Pattern size="+trainVector.size ());
                        
                        ////////////////////////////////////////////
                        
                        System.out.println ("Allocating memory for pattern Matrix: ");
                        try
                        {
                            pattern_length=trainVector.size ();
                            StringTokenizer st=new StringTokenizer (trainVector.firstElement ().toString (), " ");
                            pattern_dimension=st.countTokens ()-1;
                            String fileLine= "";
                            double [][] pattern=new double[pattern_dimension+1][pattern_length];
                            for(int x=0; 0<trainVector.size (); x++)
                            {
                                fileLine= (String)trainVector.firstElement ();
                                trainVector.removeElementAt (0);
                                System.out.print ("I");
                                if(!fileLine.startsWith ("#") || !fileLine.startsWith ("@") )
                                {
                                    String values[]=fileLine.split (" ");
                                    
                                    for(int j=0;j<values.length;j++)
                                    {
                                        pattern[j][x]= (double) Double.valueOf (values[j]).doubleValue ();
                                        
                                        //System.out.print(" "+pattern[j][x]);
                                    }
                                    //System.out.println();
                                }
                            }
                            
                            trainVector=null;
                            ////////////////////////////////////////////
                            
                            System.out.println ("\nPattern Matrix[ "+(pattern_dimension+1)+" X "+pattern_length+" ]");
                            
                            int numberOfElementsPerClass[]=new int[num_categories];
                            for(int i=0;i<pattern_length; i++)
                            {
                                numberOfElementsPerClass[(int)pattern [pattern_dimension][i]]++;
                                //System.out.println(numberOfElementsPerClass[(int)pattern [pattern_dimension][i]]);
                            }
                            largest=0;
                            t=0;
                            for(int i=0;i<numberOfElementsPerClass.length;i++)
                            {
                                if(t<numberOfElementsPerClass[i])
                                {
                                    t=numberOfElementsPerClass[i];
                                    largest=i;
                                }
                            }
                            pattern_of_each_class=new double[num_categories][pattern_dimension][numberOfElementsPerClass[largest]];
                            
                            validNumberOfPatternPerClass=new int[num_categories];
                            
                            for(int i=0;i<numberOfElementsPerClass.length;i++)
                            {
                                validNumberOfPatternPerClass[i]=numberOfElementsPerClass[i];
                            }
                            
                            for(int i=0;i<validNumberOfPatternPerClass.length;i++)
                            {
                                System.out.println ("Category= "+i+"  numberOfElements= "+validNumberOfPatternPerClass[i]);
                            }
                            System.out.println ("num_categories="+num_categories+" pattern_dimension="+pattern_dimension+" pattern_length="+pattern_length);
                            System.out.println (largest+" <--largest");
                            System.out.println ("3D Pattern Matrix["+ pattern_of_each_class.length+" X "+pattern_of_each_class[0].length+" X "+pattern_of_each_class[0][0].length+" ]");
                            
                            try
                            {
                                for(int k=0 ; k<pattern_length ;k++)
                                {
                                    int category=(int)pattern[pattern_dimension][k];
                                    int i=numberOfElementsPerClass[category]-1;
                                    if(i>=0)
                                    {
                                        for(int j=0; j<pattern_dimension; j++)
                                        {
                                            double value=pattern[j][k];
                                            pattern_of_each_class[category][j][i]=value;
                                            //System.out.print(" "+pattern_of_each_class[category][j][i]+" "+category);
                                            //if(value>0.)
                                            //{
                                            //  pattern_of_each_class[category][j][i]=StrictMath.pow ((value+20.),2.7);
                                            //}
                                            //else
                                            //{
                                            //  pattern_of_each_class[category][j][i]=value;
                                            //}
                                        }
                                        numberOfElementsPerClass[category]--;
                                    }
                                    //System.out.println(" ");
                                }
                                
                                lambdas= new double[pattern_dimension];
                                //System.out.print("Lambda= ");
                                for(int i=0;i<pattern_dimension;i++)
                                {
                                    lambdas[i]=1.0/(double)pattern_dimension;
                                    //lambdas[i]=Math.sqrt (1.0/pattern_dimension);
                                    //System.out.print(" "+lambdas[i]);
                                }
                                System.out.println ("init Lambda_i="+lambdas[0]);
                            }
                            catch(Exception e)
                            {
                                e.printStackTrace ();
                            }
                        }
                        catch(Exception e)
                        {
                            e.printStackTrace ();
                        }
                        //////////////////////////////////////////////
                        System.out.println (" ----------------- ");
                        try
                        {
                            distanceRef.setLambdas (lambdas);
                            classifier = new DGRLVQClassifier (
                            num_prototypes_per_category,
                            pattern_of_each_class,
                            validNumberOfPatternPerClass,
                            learning_rate_correct,
                            learning_rate_wrong,
                            learning_rate_lambda,
                            learning_persent_decrease,
                            normalizeLambda,
                            withMeanDynamicAllocation,
                            isKillingLoserPrototypesAllowed,
                            qualifyWinnerCount,
                            maxPersentageOfPoputationAllowedToDie,
                            num_categories,
                            pattern_length,
                            pattern_dimension,
                            distanceRef);
                            int tm=total_mode;
                            int tc=total_cycles;
                            iterations= tm*tc;
                            DistanceGeneralizedWeightedEuclidean.flag=false;
                            
                            ///////////////////////////
                            int x=0;
                            if(jCheckBox4.isSelected ())
                            {
                                double error[]=new double[25];
                                for(int g=0;g<25;g++)
                                {
                                    error[g]=1.;
                                }
                                while(tm>0)
                                {
                                    classifier.update ();
                                    classifier.updateLearning ();
                                    
                                    double errorCount=classifier.getMissclassificationErrorValue ();
                                    if(errorCount<=0.005)
                                    {
                                        tm=-1;
                                        System.out.println ("At modulus="+tm+" errorCount="+errorCount+"classifier is ready");
                                    }
                                    else
                                    {
                                        System.out.print ("["+errorCount+"}");
                                        for(int g=0;g<24;g++)
                                        {
                                            error[g]=error[g+1];
                                        }
                                        error[24]=errorCount;
                                        if((error[0]==error[24] || error[0]<error[24]) && tc>=0)
                                        {
                                            classifier.removeLosers ();
                                            classifier.addPrototypeDynamically ();
                                            for(int g=0;g<25;g++)
                                            {
                                                error[g]=1.;
                                            }
                                            tc--;
                                        }
                                        tm--;
                                    }
                                }
                            }
                            //////////////////////////
                            else
                            {
                                while(tc>0)
                                {
                                    while (tm>0)
                                    {
                                        tm--;
                                        iterations--;
                                        classifier.update ();
                                        classifier.updateLearning ();
                                        x--;
                                        if(x<=0)
                                        {
                                            DistanceGeneralizedWeightedEuclidean.flag=true;
                                            x=100;
                                        }
                                        if(tm<= 0)
                                        {
                                            if(tc>1)
                                            {
                                                classifier.removeLosers ();
                                                classifier.addPrototypeDynamically ();
                                            }
                                        }
                                    }
                                    tc--;
                                    tm=total_mode;
                                }
                                /*
                                double lamb[]=this.distanceRef.getLambdas ();
                                System.out.println ();
                                //double lambdaIntValue= Math.sqrt (1.0/pattern_dimension);
                                double lambdaIntValue= 1.0/(double)pattern_dimension;
                                for (int i = 0; i < lamb.length; i++)
                                {
                                    System.out.print (" "+lamb[i]);
                                    if(lamb[i] <= lambdaIntValue)
                                    {
                                        lamb[i]=0.;
                                    }
                                }
                                this.distanceRef.setLambdas (lamb);
                                System.out.println ("\n\n\nThreshold :: "+lambdaIntValue);
                                for (int i = 0; i < lamb.length; i++)
                                {
                                    System.out.print (" "+lamb[i]);
                                }
                                System.out.println ();
                                 
                                for(int i=0;i<2000;i++)
                                {
                                    classifier.update ();
                                    classifier.updateLearning ();
                                    x--;
                                    if(x<=0)
                                    {
                                        DistanceGeneralizedWeightedEuclidean.flag=true;
                                        x=100;
                                    }
                                }
                                 */
                            }
                        }
                        catch(Exception e)
                        {
                            e.printStackTrace ();
                        }
                        
                        //save clf
                        classifier = new DGRLVQClassifier (classifier.getAllPrototypePropertiesVector (this.total_mode,this.total_cycles));
                        
                        //load test file
                        
                        if(jCheckBox1.isSelected ())
                        {//System.out.println ("#");
                            results=classifier.testPatternWithThresholdAndNoDetails (testVector,PCT);
                        }
                        else
                        {//System.out.println ("*");
                            results=classifier.testPatternWithNoDetails (testVector);
                        }
                        System.out.println (results);
                        StringTokenizer s=new StringTokenizer (results,"\t");
                        try
                        {
                            int tv=(int)Integer.parseInt (s.nextToken ());
                            int epc=(int)Integer.parseInt (s.nextToken ());
                            double ep=(double)Double.parseDouble (s.nextToken ());
                            double sr=(double)Double.parseDouble (s.nextToken ());
                            double sn=(double)Double.parseDouble (s.nextToken ());
                            double sp=(double)Double.parseDouble (s.nextToken ());
                            double ppv=(double)Double.parseDouble (s.nextToken ());
                            double npv=(double)Double.parseDouble (s.nextToken ());
                            
                            fos.write (("<tr><td style=\"vertical-align: top;\"><small>"+tv+"</small><br></td><td style=\"vertical-align: top;\"><small>"+epc+"</small><br></td><td style=\"vertical-align: top;\"><small>"+ep+"</small><br></td><td style=\"vertical-align: top;\"><small>"+sr+"</small><br></td><td style=\"vertical-align: top;\"><small>"+sn+"</small><br></td><td style=\"vertical-align: top;\"><small>"+sp+"</small><br></td><td style=\"vertical-align: top;\"><small>"+ppv+"</small><br></td><td style=\"vertical-align: top;\"><small>"+npv+"</small><br></td></tr>").getBytes ());
                            //fos.write (results.getBytes ());
                            //fos.write (("\n").getBytes ());
                            System.out.println ();
                            System.out.println (f+" Testing done. See "+"log_M="+total_mode+"_C="+total_cycles+"_P="+persentageOfTestExamples+"_D="+numberOfDatasets+".txt"+" for details.");
                            System.out.println ("\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
                            totalVectors+=tv;
                            errorPatternCount+=epc;
                            errorPersentage+=ep;
                            successRate+=sr;
                            sensitivity+=sn;
                            specificity+=sp;
                            PPV+= ppv;
                            NPV+= npv;
                        }
                        catch(Exception e)
                        {
                            e.printStackTrace ();
                        }
                    }
                    System.out.println ("total/numberOfDatasets: "+totalVectors+"/"+numberOfDatasets+" "+errorPatternCount+"/"+numberOfDatasets+" "+errorPersentage+"/"+numberOfDatasets+" "+successRate+"/"+numberOfDatasets+" "+sensitivity+"/"+numberOfDatasets+" "+specificity+"/"+numberOfDatasets+" "+PPV+"/"+numberOfDatasets+" "+NPV+"/"+numberOfDatasets);
                    totalVectors=totalVectors/numberOfDatasets;
                    errorPatternCount=errorPatternCount/numberOfDatasets;
                    errorPersentage=errorPersentage/numberOfDatasets;
                    successRate=successRate/numberOfDatasets;
                    sensitivity=sensitivity/numberOfDatasets;
                    specificity=specificity/numberOfDatasets;
                    PPV=PPV/numberOfDatasets;
                    NPV=NPV/numberOfDatasets;
                    //String rs="\n"+totalVectors+"\t"+errorPatternCount+"\t"+errorPersentage+"\t"+successRate+"\t"+(sensitivity*100)+"\t"+(specificity*100)+"\t"+(PPV*100)+"\t"+(NPV*100)+"\n";
                    System.out.println ("total/numberOfDatasets: "+totalVectors+"\t"+errorPatternCount+"\t"+errorPersentage+"\t"+successRate+"\t"+sensitivity+"\t"+specificity+"\t"+PPV+"\t"+NPV);
                    //fos.write (rs.getBytes ());
                    fos.write (("<tr><td style=\"vertical-align: top;\"><small><font color=\"#800000\">"+totalVectors+"/"+numberOfTestExamples+"="+(((double)totalVectors/(double)numberOfTestExamples)*100.)+"%</font></small><br></td><td style=\"vertical-align: top;\"><small><font color=\"#800000\">"+errorPatternCount+"</font></small><br></td><td style=\"vertical-align: top;\"><small><font color=\"#800000\">"+errorPersentage+"</font></small><br></td><td style=\"vertical-align: top;\"><small><font color=\"#800000\">"+successRate+"</font></small><br></td><td style=\"vertical-align: top;\"><small><font color=\"#800000\">"+sensitivity+"</font></small><br></td><td style=\"vertical-align: top;\"><small><font color=\"#800000\">"+specificity+"</font></small><br></td><td style=\"vertical-align: top;\"><small><font color=\"#800000\">"+PPV+"</font></small><br></td><td style=\"vertical-align: top;\"><small><font color=\"#800000\">"+NPV+"</font></small><br></td></tr></tbody></table><br>").getBytes ());
                    fos.write (("<br>distanceRef="+distanceRef.getName ()+"<br>qualifyWinnerCount="+qualifyWinnerCount+"<br>PCT="+PCT+"("+String.valueOf (jCheckBox1.isSelected ())+")"+"<br>maxPersentageOfPoputationAllowedToDie="+maxPersentageOfPoputationAllowedToDie+"<br>learning_persent_decrease="+learning_persent_decrease+"<br>learning_rate_correct="+learning_rate_correct+"<br>learning_rate_wrong="+learning_rate_wrong+"<br>learning_rate_lambda="+learning_rate_lambda+"<br>withMeanDynamicAllocation="+withMeanDynamicAllocation+"<br>isKillingLoserPrototypesAllowed="+isKillingLoserPrototypesAllowed+"<br>normalizeLambda="+String.valueOf (normalizeLambda)+"<br>numberOfDatasets="+numberOfDatasets+"<br>"+"Expo_lambda="+(jComboBox1.getSelectedIndex ())+"<br>ExpoCoordinate="+(jComboBox4.getSelectedIndex ())+"<br>pattern_dimension="+pattern_dimension+"<br>num_categories="+num_categories+"<br>").getBytes ());
                    fos.write ("</body></html>".getBytes ());
                    fos.close ();
                    total_mode=total_mode+total_mode_inc;
                }
                total_mode=temp;
                total_cycles++;
            }
        }
        catch(Exception e)
        {
            e.printStackTrace ();
        }
        System.out.println ("Done.");
        
    }//GEN-LAST:event_jButton12MouseReleased
    
    private void jTextField18KeyReleased (java.awt.event.KeyEvent evt)//GEN-FIRST:event_jTextField18KeyReleased
    {//GEN-HEADEREND:event_jTextField18KeyReleased
        if (evt.getKeyCode () == KeyEvent.VK_ENTER)
        {
            numberOfDatasets= Integer.parseInt (jTextField18.getText ());
        }
    }//GEN-LAST:event_jTextField18KeyReleased
    
    private void jTextField17KeyReleased (java.awt.event.KeyEvent evt)//GEN-FIRST:event_jTextField17KeyReleased
    {//GEN-HEADEREND:event_jTextField17KeyReleased
        if (evt.getKeyCode () == KeyEvent.VK_ENTER)
        {
            persentageOfTestExamples= Integer.parseInt (jTextField17.getText ());
        }
    }//GEN-LAST:event_jTextField17KeyReleased
    
    private void jTextField16KeyReleased (java.awt.event.KeyEvent evt)//GEN-FIRST:event_jTextField16KeyReleased
    {//GEN-HEADEREND:event_jTextField16KeyReleased
        if (evt.getKeyCode () == KeyEvent.VK_ENTER)
        {
            try
            {
                PCT= Double.parseDouble (jTextField16.getText ());
                System.out.println ("PCT="+PCT);
            }
            catch(Exception e)
            {
                
            }
        }
    }//GEN-LAST:event_jTextField16KeyReleased
    
    private void jTextField15KeyReleased (java.awt.event.KeyEvent evt)//GEN-FIRST:event_jTextField15KeyReleased
    {//GEN-HEADEREND:event_jTextField15KeyReleased
        if (evt.getKeyCode () == KeyEvent.VK_ENTER)
        {
            try
            {
                steps= Integer.parseInt (jTextField15.getText ());
            }
            catch(Exception e)
            {
                
            }
        }
    }//GEN-LAST:event_jTextField15KeyReleased
    
    private void jTextField14KeyReleased (java.awt.event.KeyEvent evt)//GEN-FIRST:event_jTextField14KeyReleased
    {//GEN-HEADEREND:event_jTextField14KeyReleased
        if (evt.getKeyCode () == KeyEvent.VK_ENTER)
        {
            try
            {
                total_cycles_inc= Integer.parseInt (jTextField14.getText ());
            }
            catch(Exception e)
            {
                
            }
        }
    }//GEN-LAST:event_jTextField14KeyReleased
    
    private void jTextField13KeyReleased (java.awt.event.KeyEvent evt)//GEN-FIRST:event_jTextField13KeyReleased
    {//GEN-HEADEREND:event_jTextField13KeyReleased
        if (evt.getKeyCode () == KeyEvent.VK_ENTER)
        {
            try
            {
                total_mode_inc= Integer.parseInt (jTextField13.getText ());
            }
            catch(Exception e)
            {
                
            }
        }
    }//GEN-LAST:event_jTextField13KeyReleased
    
    private void jToggleButton9StateChanged (javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_jToggleButton9StateChanged
    {//GEN-HEADEREND:event_jToggleButton9StateChanged
        
        if(jToggleButton9.isSelected ())
        {
            paint_lambda=true;
            if("Events".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nlambda plot printed...");
        }
        else
        {
            paint_lambda=false;
            if("Events".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nlambda plot turned off...");
        }
        if(painting!=null)
        {
            painting.setPaintingOptions (paint_background, paint_voronoi_background, paint_grid, paint_voronoi, paint_border, paint_input, paint_prototypes,paint_lambda);
        }
    }//GEN-LAST:event_jToggleButton9StateChanged
    
    private void jSlider11StateChanged (javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_jSlider11StateChanged
    {//GEN-HEADEREND:event_jSlider11StateChanged
        if(painting!=null)
        {
            if(jSlider11.getValue ()!=0)
            {
                painting.setTransformation (jSlider11.getValue ());
                //System.out.println (jSlider11.getValue ());
            }
        }
    }//GEN-LAST:event_jSlider11StateChanged
    
    private void jComboBox8ActionPerformed (java.awt.event.ActionEvent evt)//GEN-FIRST:event_jComboBox8ActionPerformed
    {//GEN-HEADEREND:event_jComboBox8ActionPerformed
        if(painting!=null)
        {
            if(jComboBox8.getSelectedIndex ()==0)
            {
                painting.setCoordinateRegion (1, 1);
            }
            else if(jComboBox8.getSelectedIndex ()==1)
            {
                painting.setCoordinateRegion (1,  -1);
            }
            else if(jComboBox8.getSelectedIndex ()==2)
            {
                painting.setCoordinateRegion (-1,  1);
            }
            else if(jComboBox8.getSelectedIndex ()==3)
            {
                painting.setCoordinateRegion (-1,  -1);
            }
        }
    }//GEN-LAST:event_jComboBox8ActionPerformed
    
    private void jTextField11KeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_jTextField11KeyReleased
    {//GEN-HEADEREND:event_jTextField11KeyReleased
        if (evt.getKeyCode () == KeyEvent.VK_ENTER)
        {
            try
            {
                total_cycles= Integer.parseInt (jTextField11.getText ());
            }
            catch(Exception e)
            {
                if("Exceptions".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nError: "+e.getMessage ());
            }
            jSlider2.setValue (total_cycles);
            jTextField11.setText (total_cycles+"");
        }
    }//GEN-LAST:event_jTextField11KeyReleased
    
    private void jSlider2StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_jSlider2StateChanged
    {//GEN-HEADEREND:event_jSlider2StateChanged
        total_cycles=jSlider2.getValue ();
        jTextField11.setText (""+total_cycles);
    }//GEN-LAST:event_jSlider2StateChanged
    
    private void jComboBox5ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jComboBox5ActionPerformed
    {//GEN-HEADEREND:event_jComboBox5ActionPerformed
        maxPersentageOfPoputationAllowedToDie=jComboBox5.getSelectedIndex ();
        if(classifier!=null)
        {
            classifier.setMaxPersentageOfPoputationAllowedToDie (maxPersentageOfPoputationAllowedToDie);
        }
    }//GEN-LAST:event_jComboBox5ActionPerformed
    
    private void jComboBox4ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jComboBox4ActionPerformed
    {//GEN-HEADEREND:event_jComboBox4ActionPerformed
        distanceRef.setExpoCoordinate (jComboBox4.getSelectedIndex ());
        if(classifier!=null)
        {
            classifier.setDistanceRefToAllPrototypes (distanceRef);
        }
    }//GEN-LAST:event_jComboBox4ActionPerformed
    
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jComboBox1ActionPerformed
    {//GEN-HEADEREND:event_jComboBox1ActionPerformed
        distanceRef.setExpoLambda (jComboBox1.getSelectedIndex ());
        if(classifier!=null)
        {
            classifier.setDistanceRefToAllPrototypes (distanceRef);
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed
    
    private void jButton11MouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jButton11MouseReleased
    {//GEN-HEADEREND:event_jButton11MouseReleased
        doSaveAs ();
    }//GEN-LAST:event_jButton11MouseReleased
    
    private void jButton9MouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jButton9MouseReleased
    {//GEN-HEADEREND:event_jButton9MouseReleased
        if(runningmode==1)
        {
            runningmode=2;
            FileDialog fileDialog = new FileDialog (this, "Open...", FileDialog.LOAD);
            fileDialog.show ();
            if (fileDialog.getFile () == null)
            {
                return;
            }
            String fileName = fileDialog.getDirectory () + File.separator + fileDialog.getFile ();
            jButton9.setText ("Load File to Classify: "+fileDialog.getFile ());
            DataProcessor dp=new DataProcessor (fileName);
            dp.setSystemVariablesToClassify ();
            this.saveFileWindow.setText (classifier.classifyPattern (dp.getClassifyVectors ()));
        }
        else
        {
            errorWindow.setText ("Load Classifier first");
        }
    }//GEN-LAST:event_jButton9MouseReleased
    
    private void jButton10MouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jButton10MouseReleased
    {//GEN-HEADEREND:event_jButton10MouseReleased
        try
        {
            FileDialog fileDialog = new FileDialog (this, "Open Training Pattern Directory...", FileDialog.LOAD);
            fileDialog.show ();
            if (fileDialog.getDirectory () == null)
            {
                return;
            }
            String dir = fileDialog.getDirectory ();
            dir=dir.replace ('\\','/');
            File pathName=new File (dir);
            String[] fileNames=pathName.list ();
            String str = "";
            DataProcessor dp=null;
            int counter=0;
            if(jCheckBox4.isSelected ())
            {
                FileOutputStream fos=new FileOutputStream (dir+"autoProto_log_M="+total_mode+"_C="+total_cycles+".txt",false);
                for(int i=0;i<fileNames.length;i++)
                {
                    if(fileNames[i].endsWith ("train.txt") || fileNames[i].endsWith ("train") )
                    {
                        System.out.println ("####################################################");
                        dp=new DataProcessor (dir+fileNames[i]);
                        dp.setSystemVariablesForTraining ();
                        lambdas=dp.getLambdas ();
                        pattern_of_each_class=dp.get3DPattern ();
                        num_categories=dp.getNumberOfCategories ();
                        pattern_dimension=dp.getPatternDimention ();
                        pattern_length= dp.getPatternLength ();
                        validNumberOfPatternPerClass=dp.getValidNumberOfPatternPerClass ();
                        
                        try
                        {
                            distanceRef.setLambdas (lambdas);
                            classifier = new DGRLVQClassifier (
                            num_prototypes_per_category,
                            pattern_of_each_class,
                            validNumberOfPatternPerClass,
                            learning_rate_correct,
                            learning_rate_wrong,
                            learning_rate_lambda,
                            learning_persent_decrease,
                            normalizeLambda,
                            withMeanDynamicAllocation,
                            isKillingLoserPrototypesAllowed,
                            qualifyWinnerCount,
                            maxPersentageOfPoputationAllowedToDie,
                            num_categories,
                            pattern_length,
                            pattern_dimension,
                            distanceRef);
                            int tm=total_mode;
                            int tc=total_cycles;
                            iterations= tm*tc;
                            DistanceGeneralizedWeightedEuclidean.flag=false;
                            double error[]=new double[25];
                            for(int g=0;g<25;g++)
                            {
                                error[g]=1.;
                            }
                            while(tm>0)
                            {
                                classifier.update ();
                                classifier.updateLearning ();
                                
                                double errorCount=classifier.getMissclassificationErrorValue ();
                                if(errorCount<=PCT)
                                {
                                    tm=-1;
                                    System.out.println ("At modulus="+tm+" errorCount="+errorCount+"classifier is ready");
                                    
                                }
                                else
                                {
                                    System.out.print ("["+errorCount+"}");
                                    for(int g=0;g<24;g++)
                                    {
                                        error[g]=error[g+1];
                                    }
                                    error[24]=errorCount;
                                    if((error[0]==error[24] || error[0]<error[24]) && tc>=0)
                                    {
                                        classifier.removeLosers ();
                                        classifier.addPrototypeDynamically ();
                                        for(int g=0;g<25;g++)
                                        {
                                            error[g]=1.;
                                        }
                                        tc--;
                                    }
                                    tm--;
                                }
                            }
                        }
                        catch(Exception e)
                        {
                            e.printStackTrace ();
                        }
                        
                        //save clf
                        FileOutputStream clfrFOS=new FileOutputStream (dir+fileNames[i].concat (".clfr"),false);
                        clfrFOS.write (classifier.getAllPrototypeProperties (this.total_mode,this.total_cycles).getBytes ());
                        clfrFOS.close ();
                        System.out.println ("---------------------------\nClassifier Saved: "+fileNames[i].concat (".clfr"));
                        System.gc ();
                        
                        //open clfr
                        dp=new DataProcessor (dir+fileNames[i].concat (".clfr"));
                        dp.setSystemVariablesForClassifier ();
                        this.prototypePropertiesList=dp.getPrototypePropertiesList ();
                        System.out.println ("Classifier Loaded: "+fileNames[i].concat (".clfr")+"\n---------------------------");
                        classifier = new DGRLVQClassifier (prototypePropertiesList);
                        
                        //load test file
                        str=fileNames[i].replaceAll ("train", "test");
                        dp=new DataProcessor (dir+str);
                        dp.setSystemVariablesToTest ();
                        //System.out.println (classifier.testPattern (dp.getTestVectors ()));
                        java.util.Date dt = new Date ();
                        //System.out.println ( "Date = " + dt );
                        fos.write (("\n"+(counter++)+"#####"+dt.toString ()+"#####"+fileNames[i].concat (".clfr")+"#####"+fileNames[i].replaceAll ("train", "test")+"#####\n").getBytes ());
                        if(jCheckBox1.isSelected ())
                        {
                            fos.write (("\nProbabilistic Classification:-\n").getBytes ());
                            fos.write (classifier.testPatternWithThreshold (dp.getTestVectors (),PCT).getBytes ());
                        }
                        else
                        {
                            fos.write (("\nComplete Classification:-\n").getBytes ());
                            fos.write (classifier.testPattern (dp.getTestVectors ()).getBytes ());
                        }
                        fos.write (("\n-------------------------------------------------------\n").getBytes ());
                        System.out.println ("Testing done. See "+"log_M="+total_mode+"_C="+total_cycles+".txt"+" for details.");
                    }
                }
                fos.close ();
            }
            else
            {
                for(int c=1;c<=total_cycles_inc;c++)
                {
                    int temp =total_mode;
                    for(int m=0;m<=steps;m++)
                    {
                        FileOutputStream fos=new FileOutputStream (dir+"log_M="+total_mode+"_C="+total_cycles+".txt",false);
                        for(int i=0;i<fileNames.length;i++)
                        {
                            if(fileNames[i].endsWith ("train.txt") || fileNames[i].endsWith ("train") )
                            {
                                System.out.println ("####################################################");
                                dp=new DataProcessor (dir+fileNames[i]);
                                dp.setSystemVariablesForTraining ();
                                lambdas=dp.getLambdas ();
                                pattern_of_each_class=dp.get3DPattern ();
                                num_categories=dp.getNumberOfCategories ();
                                pattern_dimension=dp.getPatternDimention ();
                                pattern_length= dp.getPatternLength ();
                                validNumberOfPatternPerClass=dp.getValidNumberOfPatternPerClass ();
                                
                                try
                                {
                                    distanceRef.setLambdas (lambdas);
                                    classifier = new DGRLVQClassifier (
                                    num_prototypes_per_category,
                                    pattern_of_each_class,
                                    validNumberOfPatternPerClass,
                                    learning_rate_correct,
                                    learning_rate_wrong,
                                    learning_rate_lambda,
                                    learning_persent_decrease,
                                    normalizeLambda,
                                    withMeanDynamicAllocation,
                                    isKillingLoserPrototypesAllowed,
                                    qualifyWinnerCount,
                                    maxPersentageOfPoputationAllowedToDie,
                                    num_categories,
                                    pattern_length,
                                    pattern_dimension,
                                    distanceRef);
                                    int tm=total_mode;
                                    int tc=total_cycles;
                                    iterations= tm*tc;
                                    DistanceGeneralizedWeightedEuclidean.flag=false;
                                    while(tc>0)
                                    {
                                        while (tm>0)
                                        {
                                            tm--;
                                            iterations--;
                                            classifier.update ();
                                            classifier.updateLearning ();
                                            
                                            if(jCheckBox2.isSelected ())
                                            {
                                                if(classifier.isAllVectorsCorrectlyClassified (true))
                                                {
                                                    System.out.println ("At Modulus="+tm+" Cycles="+tc+" classifier is ready");
                                                    System.out.println ("Initial Modulus="+total_mode+" Initial Cycles="+total_cycles);
                                                    
                                                }
                                            }
                                            if(jCheckBox3.isSelected ())
                                            {
                                                if(classifier.isAllVectorsCorrectlyClassified (false))
                                                {
                                                    System.out.println ("At Modulus="+tm+" Cycles="+tc+" classifier is ready");
                                                    System.out.println ("Initial Modulus="+total_mode+" Initial Cycles="+total_cycles);
                                                    tm=-1;
                                                    tc=-1;
                                                }
                                            }
                                            if(tm<= 0)
                                            {
                                                if(tc>1)
                                                {
                                                    classifier.removeLosers ();
                                                    classifier.addPrototypeDynamically ();
                                                }
                                            }
                                        }
                                        tc--;
                                        tm=total_mode;
                                    }
                                }
                                catch(Exception e)
                                {
                                    e.printStackTrace ();
                                }
                                
                                //save clf
                                FileOutputStream clfrFOS=new FileOutputStream (dir+fileNames[i].concat (".clfr"),false);
                                clfrFOS.write (classifier.getAllPrototypeProperties (this.total_mode,this.total_cycles).getBytes ());
                                clfrFOS.close ();
                                System.out.println ("---------------------------\nClassifier Saved: "+fileNames[i].concat (".clfr"));
                                System.gc ();
                                
                                //open clfr
                                dp=new DataProcessor (dir+fileNames[i].concat (".clfr"));
                                dp.setSystemVariablesForClassifier ();
                                this.prototypePropertiesList=dp.getPrototypePropertiesList ();
                                System.out.println ("Classifier Loaded: "+fileNames[i].concat (".clfr")+"\n---------------------------");
                                classifier = new DGRLVQClassifier (prototypePropertiesList);
                                
                                //load test file
                                str=fileNames[i].replaceAll ("train", "test");
                                dp=new DataProcessor (dir+str);
                                dp.setSystemVariablesToTest ();
                                //System.out.println (classifier.testPattern (dp.getTestVectors ()));
                                java.util.Date dt = new Date ();
                                //System.out.println ( "Date = " + dt );
                                fos.write (("\n"+(counter++)+"#####"+dt.toString ()+"#####"+fileNames[i].concat (".clfr")+"#####"+fileNames[i].replaceAll ("train", "test")+"#####\n").getBytes ());
                                if(jCheckBox1.isSelected ())
                                {
                                    fos.write (("\nProbabilistic Classification:-\n").getBytes ());
                                    fos.write (classifier.testPatternWithThreshold (dp.getTestVectors (),PCT).getBytes ());
                                }
                                else
                                {
                                    fos.write (("\nComplete Classification:-\n").getBytes ());
                                    fos.write (classifier.testPattern (dp.getTestVectors ()).getBytes ());
                                }
                                fos.write (("\n-------------------------------------------------------\n").getBytes ());
                                System.out.println ("Testing done. See "+"log_M="+total_mode+"_C="+total_cycles+".txt"+" for details.");
                            }
                        }
                        fos.close ();
                        total_mode=total_mode+total_mode_inc;
                    }
                    total_mode=temp;
                    total_cycles++;
                }
            }
        }
        catch(Exception e)
        {
            e.printStackTrace ();
        }
        System.out.println ("Done.");
    }//GEN-LAST:event_jButton10MouseReleased
    
    private void jButton7MouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jButton7MouseReleased
    {//GEN-HEADEREND:event_jButton7MouseReleased
        if(runningmode==1)
        {
            FileDialog fileDialog = new FileDialog (this, "Open...", FileDialog.LOAD);
            fileDialog.show ();
            if (fileDialog.getFile () == null)
            {
                return;
            }
            String fileName = fileDialog.getDirectory () + File.separator + fileDialog.getFile ();
            jButton7.setText ("Load Test File: "+fileDialog.getFile ());
            DataProcessor dp=new DataProcessor (fileName);
            dp.setSystemVariablesToTest ();
            if(jCheckBox1.isSelected ())
            {
                this.saveFileWindow.setText (classifier.testPatternWithThresholdAndNoDetails (dp.getTestVectors (),PCT));
            }
            else
            {
                this.saveFileWindow.setText (classifier.testPattern (dp.getTestVectors ()));
            }
        }
        else
        {
            errorWindow.setText ("Load Classifier first");
        }
    }//GEN-LAST:event_jButton7MouseReleased
    
    private void jButton8MouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jButton8MouseReleased
    {//GEN-HEADEREND:event_jButton8MouseReleased
        System.gc ();
        runningmode=1;
        FileDialog fileDialog = new FileDialog (this, "Open Classifier...", FileDialog.LOAD);
        fileDialog.show ();
        if (fileDialog.getFile () == null)
        {
            return;
        }
        String fileName = fileDialog.getDirectory () + File.separator + fileDialog.getFile ();
        jButton8.setText ("Load Classifier: "+fileDialog.getFile ());
        DataProcessor dp=new DataProcessor (fileName);
        dp.setSystemVariablesForClassifier ();
        this.prototypePropertiesList=dp.getPrototypePropertiesList ();
        this.saveFileWindow.setText ("Classifier Loaded: "+fileDialog.getFile ()+"\nPath: "+fileName );
        /*
        for(int i=0;i<prototypePropertiesList.size ();i++)
        {
            this.saveFileWindow.append ( prototypePropertiesList.elementAt (i).toString ()+"\n");
        }
         */
        initClassifier ();
        this.learning_rate_lambda= classifier.getLearningRateLambda ();
        this.learning_persent_decrease=classifier.getLearningRateDecay ();
        this.learning_rate_correct=classifier.getLearningRateCorrect ();
        this.learning_rate_wrong=classifier.getLearningRateWrong ();
        this.distanceRef=classifier.getDistanceRefToAllPrototypes ();
        this.isKillingLoserPrototypesAllowed=classifier.isKillingLoserPrototypesAllowed ();
        this.normalizeLambda=classifier.isLambdaNormalization ();
        this.withMeanDynamicAllocation=classifier.isWithMeanDynamicAllocation ();
        this.maxPersentageOfPoputationAllowedToDie=classifier.getMaxPersentageOfPoputationAllowedToDie ();
        this.qualifyWinnerCount=classifier.getQualifyWinnerCount ();
        this.total_cycles=classifier.getTotalCycles ();
        this.total_mode=classifier.getTotalModulus ();
        resetAllComponents ();
        
    }//GEN-LAST:event_jButton8MouseReleased
    
    private void jTextField4KeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_jTextField4KeyReleased
    {//GEN-HEADEREND:event_jTextField4KeyReleased
        if (evt.getKeyCode () == KeyEvent.VK_ENTER)
        {
            try
            {
                qualifyWinnerCount= Integer.parseInt (jTextField4.getText ());
            }
            catch(Exception e)
            {
                if("Exceptions".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nError: "+e.getMessage ());
            }
            jSlider3.setValue (qualifyWinnerCount);
            jTextField4.setText (qualifyWinnerCount+"");
            if(classifier!=null)
            {
                classifier.setQualifyWinnerCount (qualifyWinnerCount);
            }
        }
        if("Events".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.setText (jSlider3.getValue ()+"");
    }//GEN-LAST:event_jTextField4KeyReleased
    
    private void jTextField12KeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_jTextField12KeyReleased
    {//GEN-HEADEREND:event_jTextField12KeyReleased
        if (evt.getKeyCode () == KeyEvent.VK_ENTER)
        {
            try
            {
                num_prototypes_per_category= Integer.parseInt (jTextField12.getText ());
            }
            catch(Exception e)
            {
                if("Exceptions".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nError: "+e.getMessage ());
            }
            jSlider10.setValue (num_prototypes_per_category);
            jTextField12.setText (num_prototypes_per_category+"");
        }
        if("Events".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.setText (jSlider10.getValue ()+"");
    }//GEN-LAST:event_jTextField12KeyReleased
    
    private void jTextField10KeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_jTextField10KeyReleased
    {//GEN-HEADEREND:event_jTextField10KeyReleased
        if (evt.getKeyCode () == KeyEvent.VK_ENTER)
        {
            try
            {
                learning_rate_lambda= Double.parseDouble (jTextField10.getText ());
            }
            catch(Exception e)
            {
                if("Exceptions".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nError: "+e.getMessage ());
            }
            jSlider14.setValue ((int)(learning_rate_lambda*100000));
            //jSlider18.setValue((int)(learning_rate_lambda*1000));
            jTextField10.setText (learning_rate_lambda+"");
            if(classifier!=null)
            {
                classifier.setLearning (learning_rate_correct, learning_rate_wrong, learning_rate_lambda, learning_persent_decrease);
            }
        }
        if("Events".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.setText (learning_rate_lambda+" =LRL ");
    }//GEN-LAST:event_jTextField10KeyReleased
    
    private void jTextField9KeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_jTextField9KeyReleased
    {//GEN-HEADEREND:event_jTextField9KeyReleased
        if (evt.getKeyCode () == KeyEvent.VK_ENTER)
        {
            try
            {
                learning_rate_wrong= Double.parseDouble (jTextField9.getText ());
            }
            catch(Exception e)
            {
                if("Exceptions".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nError: "+e.getMessage ());
            }
            jSlider13.setValue ((int)(learning_rate_wrong*100000));
            jTextField9.setText (learning_rate_wrong+"");
            if(classifier!=null)
            {
                classifier.setLearning (learning_rate_correct, learning_rate_wrong, learning_rate_lambda, learning_persent_decrease);
            }
        }
        if("Events".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.setText (learning_rate_wrong+" =LRW ");
    }//GEN-LAST:event_jTextField9KeyReleased
    
    private void jTextField8KeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_jTextField8KeyReleased
    {//GEN-HEADEREND:event_jTextField8KeyReleased
        if (evt.getKeyCode () == KeyEvent.VK_ENTER)
        {
            try
            {
                learning_rate_correct= Double.parseDouble (jTextField8.getText ());
            }
            catch(Exception e)
            {
                if("Exceptions".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nError: "+e.getMessage ());
            }
            jSlider4.setValue ((int)(learning_rate_correct*100000));
            jTextField8.setText (learning_rate_correct+"");
            if(classifier!=null)
            {
                classifier.setLearning (learning_rate_correct, learning_rate_wrong, learning_rate_lambda, learning_persent_decrease);
            }
        }
        if("Events".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.setText (learning_rate_correct+" =LRC ");
    }//GEN-LAST:event_jTextField8KeyReleased
    
    private void jTextField5KeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_jTextField5KeyReleased
    {//GEN-HEADEREND:event_jTextField5KeyReleased
        if (evt.getKeyCode () == KeyEvent.VK_ENTER)
        {
            try
            {
                learning_persent_decrease= Integer.parseInt (jTextField5.getText ());
            }
            catch(Exception e)
            {
                if("Exceptions".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nError: "+e.getMessage ());
            }
            jSlider6.setValue (learning_persent_decrease);
            jTextField5.setText (learning_persent_decrease+"");
            if(classifier!=null)
            {
                classifier.setLearning (learning_rate_correct, learning_rate_wrong, learning_rate_lambda, learning_persent_decrease);
            }
        }
    }//GEN-LAST:event_jTextField5KeyReleased
    
    private void jTextField7KeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_jTextField7KeyReleased
    {//GEN-HEADEREND:event_jTextField7KeyReleased
        if (evt.getKeyCode () == KeyEvent.VK_ENTER)
        {
            try
            {
                total_mode= Integer.parseInt (jTextField7.getText ());
            }
            catch(Exception e)
            {
                if("Exceptions".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nError: "+e.getMessage ());
            }
            jSlider5.setValue (total_mode);
            jTextField7.setText (total_mode+"");
        }
    }//GEN-LAST:event_jTextField7KeyReleased
    
    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_jTextField1KeyReleased
    {//GEN-HEADEREND:event_jTextField1KeyReleased
        if (evt.getKeyCode () == KeyEvent.VK_ENTER)
        {
            try
            {
                delay= Integer.parseInt (jTextField1.getText ());
            }
            catch(Exception e)
            {
                if("Exceptions".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nError: "+e.getMessage ());
            }
            jSlider1.setValue (delay);
            jTextField1.setText (delay+"");
            if(painting!=null)
            {
                painting.setDelay (delay);
            }
        }
    }//GEN-LAST:event_jTextField1KeyReleased
    
    private void jTextField6KeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_jTextField6KeyReleased
    {//GEN-HEADEREND:event_jTextField6KeyReleased
        if (evt.getKeyCode () == KeyEvent.VK_ENTER)
        {
            try
            {
                grid_factor= Integer.parseInt (jTextField6.getText ());
            }
            catch(Exception e)
            {
                if("Exceptions".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nError: "+e.getMessage ());
            }
            jSlider12.setValue (grid_factor);
            jTextField6.setText (grid_factor+"");
            if(painting!= null)
            {
                painting.setGridFactor (grid_factor);
                painting.getGraphics ().clearRect (0,0,painting.getWidth (),painting.getHeight ());
                painting.initGrid ();
            }
        }
    }//GEN-LAST:event_jTextField6KeyReleased
    
    private void jTextField3KeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_jTextField3KeyReleased
    {//GEN-HEADEREND:event_jTextField3KeyReleased
        if (evt.getKeyCode () == KeyEvent.VK_ENTER)
        {
            try
            {
                width= Integer.parseInt (jTextField3.getText ());
            }
            catch(Exception e)
            {
                if("Exceptions".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nError: "+e.getMessage ());
            }
            jSlider7.setValue (width);
            jTextField3.setText (width+"");
            if(painting!=null)
            {
                painting.setSize (width, height);
                painting.getGraphics ().clearRect (0,0,painting.getWidth (),painting.getHeight ());
            }
        }
    }//GEN-LAST:event_jTextField3KeyReleased
    
    private void jTextField2KeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_jTextField2KeyReleased
    {//GEN-HEADEREND:event_jTextField2KeyReleased
        if (evt.getKeyCode () == KeyEvent.VK_ENTER)
        {
            try
            {
                height= Integer.parseInt (jTextField2.getText ());
            }
            catch(Exception e)
            {
                if("Exceptions".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nError: "+e.getMessage ());
            }
            jSlider8.setValue (height);
            jTextField2.setText (height+"");
            if(painting!=null)
            {
                painting.setSize (width, height);
                painting.getGraphics ().clearRect (0,0,painting.getWidth (),painting.getHeight ());
            }
        }
    }//GEN-LAST:event_jTextField2KeyReleased
    
    private void jSlider18StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_jSlider18StateChanged
    {//GEN-HEADEREND:event_jSlider18StateChanged
        double value= (double)jSlider18.getValue ()/1000;
        learning_rate_lambda= Math.exp (value);
        jTextField10.setText (""+learning_rate_lambda);
        if(classifier!=null)
        {
            classifier.setLearning (learning_rate_correct, learning_rate_wrong, learning_rate_lambda, learning_persent_decrease);
        }
        if("Events".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.setText (jSlider18.getValue ()+" =LRL");
    }//GEN-LAST:event_jSlider18StateChanged
    
    private void jSlider17StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_jSlider17StateChanged
    {//GEN-HEADEREND:event_jSlider17StateChanged
        double value= (double)jSlider17.getValue ()/1000;
        learning_rate_wrong= Math.exp (value);
        jTextField9.setText (""+learning_rate_wrong);
        if(classifier!=null)
        {
            classifier.setLearning (learning_rate_correct, learning_rate_wrong, learning_rate_lambda, learning_persent_decrease);
        }
        if("Events".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.setText (jSlider17.getValue ()+" =LRW");
    }//GEN-LAST:event_jSlider17StateChanged
    
    private void jSlider9StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_jSlider9StateChanged
    {//GEN-HEADEREND:event_jSlider9StateChanged
        double value= (double)jSlider9.getValue ()/1000;//jSlider9.setValue((int)(-learning_rate_correct*1000));
        learning_rate_correct= Math.exp (value);
        jTextField8.setText (""+learning_rate_correct);
        //jSlider4.setValue((int)(learning_rate_correct*100000));
        if("Events".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.setText (jSlider9.getValue ()+" =LRC");
        if(classifier!=null)
        {
            classifier.setLearning (learning_rate_correct, learning_rate_wrong, learning_rate_lambda, learning_persent_decrease);
        }
    }//GEN-LAST:event_jSlider9StateChanged
    
    private void jComboBox7ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jComboBox7ActionPerformed
    {//GEN-HEADEREND:event_jComboBox7ActionPerformed
        errorWindow.setText ("");
    }//GEN-LAST:event_jComboBox7ActionPerformed
    
    private void dynamic_allocation_jComboBox6ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_dynamic_allocation_jComboBox6ActionPerformed
    {//GEN-HEADEREND:event_dynamic_allocation_jComboBox6ActionPerformed
        if(jComboBox6.getSelectedIndex ()==0)
        {
            withMeanDynamicAllocation=true;
        }
        else
        {
            withMeanDynamicAllocation=false;
        }
        if(classifier!=null)
        {
            classifier.setWithMeanDynamicAllocation (withMeanDynamicAllocation);
        }
        if("Events".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nDynamic Allocation with Mean Method turned "+withMeanDynamicAllocation+" Selected index="+jComboBox6.getSelectedIndex ());
        
    }//GEN-LAST:event_dynamic_allocation_jComboBox6ActionPerformed
    
    private void y_dimention_jSlider16StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_y_dimention_jSlider16StateChanged
    {//GEN-HEADEREND:event_y_dimention_jSlider16StateChanged
        yAxis=jSlider16.getValue ();
        jLabel19.setText (xAxis+","+yAxis);
        if(painting!=null)
        {
            painting.setAxis (xAxis, yAxis);
        }
    }//GEN-LAST:event_y_dimention_jSlider16StateChanged
    
    private void x_dimention_jSlider15StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_x_dimention_jSlider15StateChanged
    {//GEN-HEADEREND:event_x_dimention_jSlider15StateChanged
        xAxis=jSlider15.getValue ();
        jLabel19.setText (xAxis+","+yAxis);
        if(painting!=null)
        {
            painting.setAxis (xAxis, yAxis);
        }
    }//GEN-LAST:event_x_dimention_jSlider15StateChanged
    
    private void learning_rate_lambda_jSlider14StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_learning_rate_lambda_jSlider14StateChanged
    {//GEN-HEADEREND:event_learning_rate_lambda_jSlider14StateChanged
        learning_rate_lambda= (double)jSlider14.getValue ()/100000;
        jTextField10.setText (""+learning_rate_lambda);
        if(classifier!=null)
        {
            classifier.setLearning (learning_rate_correct, learning_rate_wrong, learning_rate_lambda, learning_persent_decrease);
        }
    }//GEN-LAST:event_learning_rate_lambda_jSlider14StateChanged
    
    private void learning_rate_wrong_jSlider13StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_learning_rate_wrong_jSlider13StateChanged
    {//GEN-HEADEREND:event_learning_rate_wrong_jSlider13StateChanged
        learning_rate_wrong= (double)jSlider13.getValue ()/100000;
        jTextField9.setText (""+learning_rate_wrong);
        if(classifier!=null)
        {
            classifier.setLearning (learning_rate_correct, learning_rate_wrong, learning_rate_lambda, learning_persent_decrease);
        }
    }//GEN-LAST:event_learning_rate_wrong_jSlider13StateChanged
    
    private void Normalized_Lambda_jToggleButton8StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_Normalized_Lambda_jToggleButton8StateChanged
    {//GEN-HEADEREND:event_Normalized_Lambda_jToggleButton8StateChanged
        if(jToggleButton8.isSelected ())
        {
            normalizeLambda=true;
            if("Events".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nNORMALIZE_LAMBDA=true");
        }
        else
        {
            normalizeLambda=false;
            if("Events".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nNORMALIZE_LAMBDA=false");
        }
        if(classifier!=null)
        {
            classifier.setLambdaNormalization (normalizeLambda);
        }
    }//GEN-LAST:event_Normalized_Lambda_jToggleButton8StateChanged
    
    private void learning_persent_decrease_jSlider6StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_learning_persent_decrease_jSlider6StateChanged
    {//GEN-HEADEREND:event_learning_persent_decrease_jSlider6StateChanged
        learning_persent_decrease= jSlider6.getValue ();
        jTextField5.setText (""+learning_persent_decrease);
        if(classifier!=null)
        {
            classifier.setLearning (learning_rate_correct, learning_rate_wrong, learning_rate_lambda, learning_persent_decrease);
        }
    }//GEN-LAST:event_learning_persent_decrease_jSlider6StateChanged
    
    private void paint_border_jToggleButton7StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_paint_border_jToggleButton7StateChanged
    {//GEN-HEADEREND:event_paint_border_jToggleButton7StateChanged
        if(jToggleButton7.isSelected ())
        {
            paint_border=true;
            if("Events".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nBorders will be darken...");
        }
        else
        {
            paint_border=false;
            if("Events".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nBorders will light up...");
        }
        if(painting!=null)
        {
            painting.setPaintingOptions (paint_background, paint_voronoi_background, paint_grid, paint_voronoi, paint_border, paint_input, paint_prototypes,paint_lambda);
        }
    }//GEN-LAST:event_paint_border_jToggleButton7StateChanged
    
    private void paint_input_jToggleButton6StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_paint_input_jToggleButton6StateChanged
    {//GEN-HEADEREND:event_paint_input_jToggleButton6StateChanged
        if(jToggleButton6.isSelected ())
        {
            paint_input=true;
            if("Events".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nInput points printed...");
        }
        else
        {
            paint_input=false;
            if("Events".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nNo Input points printed...");
        }
        if(painting!=null)
        {
            painting.setPaintingOptions (paint_background, paint_voronoi_background, paint_grid, paint_voronoi, paint_border, paint_input, paint_prototypes,paint_lambda);
        }
    }//GEN-LAST:event_paint_input_jToggleButton6StateChanged
    
    private void paint_neurons_jToggleButton5StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_paint_neurons_jToggleButton5StateChanged
    {//GEN-HEADEREND:event_paint_neurons_jToggleButton5StateChanged
        if(jToggleButton5.isSelected ())
        {
            paint_prototypes=true;
            if("Events".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nPrototypes will be printed...");
        }
        else
        {
            paint_prototypes=false;
            if("Events".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nNo Prototypes will be printed...");
        }
        if(painting!=null)
        {
            painting.setPaintingOptions (paint_background, paint_voronoi_background, paint_grid, paint_voronoi, paint_border, paint_input, paint_prototypes,paint_lambda);
        }
    }//GEN-LAST:event_paint_neurons_jToggleButton5StateChanged
    
    private void paint_voronoi_jToggleButton4StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_paint_voronoi_jToggleButton4StateChanged
    {//GEN-HEADEREND:event_paint_voronoi_jToggleButton4StateChanged
        if(jToggleButton4.isSelected ())
        {
            paint_voronoi=true;
            if("Events".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nVoronoi space will be printed...");
        }
        else
        {
            paint_voronoi=false;
            if("Events".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nNo Voronoi space will be printed...");
        }
        if(painting!=null)
        {
            painting.setPaintingOptions (paint_background, paint_voronoi_background, paint_grid, paint_voronoi, paint_border, paint_input, paint_prototypes,paint_lambda);
        }
    }//GEN-LAST:event_paint_voronoi_jToggleButton4StateChanged
    
    private void paint_grid_jToggleButton3StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_paint_grid_jToggleButton3StateChanged
    {//GEN-HEADEREND:event_paint_grid_jToggleButton3StateChanged
        if(jToggleButton3.isSelected ())
        {
            paint_grid=true;
            if("Events".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nGrid will be printed...");
        }
        else
        {
            paint_grid=false;
            if("Events".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nNo Grid will be printed...");
        }
        if(painting!=null)
        {
            painting.setPaintingOptions (paint_background, paint_voronoi_background, paint_grid, paint_voronoi, paint_border, paint_input, paint_prototypes,paint_lambda);
        }
    }//GEN-LAST:event_paint_grid_jToggleButton3StateChanged
    
    private void paint_voronoi_background_jToggleButton2StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_paint_voronoi_background_jToggleButton2StateChanged
    {//GEN-HEADEREND:event_paint_voronoi_background_jToggleButton2StateChanged
        if(jToggleButton2.isSelected ())
        {
            paint_voronoi_background=true;
            if("Events".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nVoronoi Background will be printed...");
        }
        else
        {
            paint_voronoi_background=false;
            if("Events".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nNo Voronoi Background will be printed...");
        }
        if(painting!=null)
        {
            painting.setPaintingOptions (paint_background, paint_voronoi_background, paint_grid, paint_voronoi, paint_border, paint_input, paint_prototypes,paint_lambda);
        }
    }//GEN-LAST:event_paint_voronoi_background_jToggleButton2StateChanged
    
    private void paint_background_jToggleButton1StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_paint_background_jToggleButton1StateChanged
    {//GEN-HEADEREND:event_paint_background_jToggleButton1StateChanged
        if(jToggleButton1.isSelected ())
        {
            paint_background=true;
            if("Events".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nPrototype's track trace is ON...");
        }
        else
        {
            paint_background=false;
            if("Events".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nPrototype's track trace is OFF...");
        }
        if(painting!=null)
        {
            painting.setPaintingOptions (paint_background, paint_voronoi_background, paint_grid, paint_voronoi, paint_border, paint_input, paint_prototypes,paint_lambda);
        }
    }//GEN-LAST:event_paint_background_jToggleButton1StateChanged
    
    private void grid_factor_jSlider12StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_grid_factor_jSlider12StateChanged
    {//GEN-HEADEREND:event_grid_factor_jSlider12StateChanged
        grid_factor= jSlider12.getValue ();
        jTextField6.setText (""+grid_factor);
        if(painting!= null)
        {
            painting.setGridFactor (grid_factor);
            painting.getGraphics ().clearRect (0,0,painting.getWidth (),painting.getHeight ());
            painting.initGrid ();
        }
    }//GEN-LAST:event_grid_factor_jSlider12StateChanged
    
    private void num_neurons_per_category_jSlider10StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_num_neurons_per_category_jSlider10StateChanged
    {//GEN-HEADEREND:event_num_neurons_per_category_jSlider10StateChanged
        num_prototypes_per_category= jSlider10.getValue ();
        jTextField12.setText (""+num_prototypes_per_category);
    }//GEN-LAST:event_num_neurons_per_category_jSlider10StateChanged
    
    private void distance_jComboBox3ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_distance_jComboBox3ActionPerformed
    {//GEN-HEADEREND:event_distance_jComboBox3ActionPerformed
        
        try
        {
            distanceRef = (DistanceInterface)Class.forName (jComboBox3.getSelectedItem ().toString ()).newInstance ();
            if(classifier!=null)
            {
                distanceRef.setLambdas (lambdas);
                classifier.setDistanceRefToAllPrototypes (distanceRef);
            }
            if("Events".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nDistance Algo class loaded "+distanceRef.getName ()+" is active now...");
        }
        catch(Exception e)
        {
            if("Exceptions".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nCannot load class"+jComboBox3.getSelectedItem ().toString () +" for you: "+e.getMessage ());//e.printStackTrace();
        }
        
    }//GEN-LAST:event_distance_jComboBox3ActionPerformed
    
    private void learning_rate_jSlider4StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_learning_rate_jSlider4StateChanged
    {//GEN-HEADEREND:event_learning_rate_jSlider4StateChanged
        learning_rate_correct= (double)jSlider4.getValue ()/100000;
        jTextField8.setText (""+learning_rate_correct);
        if(classifier!=null)
        {
            classifier.setLearning (learning_rate_correct, learning_rate_wrong, learning_rate_lambda, learning_persent_decrease);
        }
        if("Events".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.setText (jSlider4.getValue ()+" =LRC");
    }//GEN-LAST:event_learning_rate_jSlider4StateChanged
    
    private void height_jSlider8StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_height_jSlider8StateChanged
    {//GEN-HEADEREND:event_height_jSlider8StateChanged
        height= jSlider8.getValue ();
        jTextField2.setText (height+"");
        if(painting!=null)
        {
            painting.setSize (width, height);
            painting.getGraphics ().clearRect (0,0,painting.getWidth (),painting.getHeight ());
        }
    }//GEN-LAST:event_height_jSlider8StateChanged
    
    private void width_jSlider7StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_width_jSlider7StateChanged
    {//GEN-HEADEREND:event_width_jSlider7StateChanged
        width= jSlider7.getValue ();
        jTextField3.setText (width+"");
        if(painting!=null)
        {
            painting.setSize (width, height);
            painting.getGraphics ().clearRect (0,0,painting.getWidth (),painting.getHeight ());
        }
    }//GEN-LAST:event_width_jSlider7StateChanged
    
    private void total_iterations_jSlider5StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_total_iterations_jSlider5StateChanged
    {//GEN-HEADEREND:event_total_iterations_jSlider5StateChanged
        total_mode=jSlider5.getValue ();
        jTextField7.setText (""+total_mode);
    }//GEN-LAST:event_total_iterations_jSlider5StateChanged
    
    private void Cluster_jSlider3StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_Cluster_jSlider3StateChanged
    {//GEN-HEADEREND:event_Cluster_jSlider3StateChanged
        qualifyWinnerCount=jSlider3.getValue ();
        jTextField4.setText (""+qualifyWinnerCount);
        if(classifier!=null)
        {
            classifier.setQualifyWinnerCount (qualifyWinnerCount);
        }
    }//GEN-LAST:event_Cluster_jSlider3StateChanged
    
    private void PULLDOWN_jComboBox2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_PULLDOWN_jComboBox2ActionPerformed
    {//GEN-HEADEREND:event_PULLDOWN_jComboBox2ActionPerformed
        if(jComboBox2.getSelectedIndex ()==0)
        {
            isKillingLoserPrototypesAllowed=false;
        }
        else
        {
            isKillingLoserPrototypesAllowed=true;
        }
        if(classifier!=null)
        {
            classifier.setKillingLoserPrototypesAllowed (isKillingLoserPrototypesAllowed);
        }
        jTextArea3.setText ("is Killing Loser Prototypes Allowed="+withMeanDynamicAllocation+" Seleceted index:"+jComboBox2.getSelectedIndex ());
    }//GEN-LAST:event_PULLDOWN_jComboBox2ActionPerformed
    
    private void START_jButton3MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_START_jButton3MouseReleased
        try
        {
            if(runningmode==0)//trainmode
            {
                initClassifier ();
                painting=new Painting (classifier, this.pattern_of_each_class,this.validNumberOfPatternPerClass,pattern_dimension, pattern_length, width, height, grid_factor, xAxis, yAxis);
                jPanel10.removeAll ();
                jPanel10.add (painting);
                SwingUtilities.updateComponentTreeUI (this);
                this.start ();
                painting.start ();
            }
            else if(runningmode==1)//trainmode with preloaded classifier
            {
                painting=new Painting (classifier, this.pattern_of_each_class,this.validNumberOfPatternPerClass,pattern_dimension, pattern_length, width, height, grid_factor, xAxis, yAxis);
                jPanel10.removeAll ();
                jPanel10.add (painting);
                SwingUtilities.updateComponentTreeUI (this);
                this.start ();
                painting.start ();
            }
            
        }
        catch(Exception e)
        {
            if("Exceptions".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nError: "+e.getMessage ());
        }
        if("Events".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nStarting Algo now. Calculations in progress...");
    }//GEN-LAST:event_START_jButton3MouseReleased
    
    private void RESET_jButton5MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RESET_jButton5MouseReleased
        resetDefaults ();
        resetAllComponents ();
        
    }//GEN-LAST:event_RESET_jButton5MouseReleased
    
    private void STOP_jButton4MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_STOP_jButton4MouseReleased
        
        try
        {
            this.stop ();
            if(painting!=null)
            {
                painting.setUpdatPaintingON (false );
                painting.stop ();
            }
        }
        catch(Exception e)
        {
            if("Exceptions".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nProblem while Thread stop: "+e.getMessage ());
        }
        if("Events".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nAlgo is stopped...");
        
    }//GEN-LAST:event_STOP_jButton4MouseReleased
    
    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        delay=jSlider1.getValue ();
        jTextField1.setText (""+delay);
        if(painting!=null)
        {
            painting.setDelay (delay);
        }
    }//GEN-LAST:event_jSlider1StateChanged
    
    private void jButton1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseReleased
        saveFileWindow.setText (classifier.getAllPrototypeProperties (this.total_mode,this.total_cycles));
        doSaveAs ();
    }//GEN-LAST:event_jButton1MouseReleased
    
    private void jButton2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseReleased
        runningmode=0; //training mode;
        FileDialog fileDialog = new FileDialog (this, "Open Training Pattern File...", FileDialog.LOAD);
        fileDialog.show ();
        if (fileDialog.getFile () == null)
        {
            return;
        }
        String fileName = fileDialog.getDirectory () + File.separator + fileDialog.getFile ();
        jButton2.setText ("Load Pattern: "+fileDialog.getFile ());
        this.saveFileWindow.setText ("Pattern Loaded: "+fileDialog.getFile ()+"\nPath: "+fileName );
        DataProcessor dp=new DataProcessor (fileName);
        dp.setSystemVariablesForTraining ();
        lambdas=dp.getLambdas ();
        //pattern=dp.get2DPattern ();
        pattern_of_each_class=dp.get3DPattern ();
        num_categories=dp.getNumberOfCategories ();
        pattern_dimension=dp.getPatternDimention ();
        pattern_length= dp.getPatternLength ();
        validNumberOfPatternPerClass=dp.getValidNumberOfPatternPerClass ();
        jSlider15.setMaximum (pattern_dimension-1);
        jSlider15.setValue (0);
        jSlider16.setMaximum (pattern_dimension-1);
        jSlider16.setValue (1);
    }//GEN-LAST:event_jButton2MouseReleased
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        try
        {
            this.stop ();
            if(painting!=null) painting.stop ();
        }
        catch(Exception e)
        {
            if("Exceptions".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nProblem while Thread stop: "+e.getMessage ());
        }
        System.exit (0);
    }//GEN-LAST:event_exitForm
    public void run ()
    {
        int tm=total_mode;
        int tc=total_cycles;
        iterations= tm*tc;
        int x=100;
        if(jCheckBox4.isSelected ())
        {
            double error[]=new double[25];
            for(int g=0;g<25;g++)
            {
                error[g]=1.;
            }
            while(tm>0)
            {
                classifier.update ();
                classifier.updateLearning ();
                
                double errorCount=classifier.getMissclassificationErrorValue ();
                if(errorCount<=0.005)
                {
                    tm=-1;
                    System.out.println ("At modulus="+tm+" errorCount="+errorCount+"classifier is ready");
                }
                else
                {
                    System.out.print ("["+errorCount+"}");
                    for(int g=0;g<24;g++)
                    {
                        error[g]=error[g+1];
                    }
                    error[24]=errorCount;
                    if((error[0]==error[24] || error[0]<error[24]) && tc>=0)
                    {
                        classifier.removeLosers ();
                        classifier.addPrototypeDynamically ();
                        for(int g=0;g<25;g++)
                        {
                            error[g]=1.;
                        }
                        tc--;
                    }
                    tm--;
                }
            }
        }
        else
        {
            while(tc>0)
            {
                while (tm>0)
                {
                    tm--;
                    iterations--;
                    x--;
                    if(x<=0)
                    {
                        DistanceGeneralizedWeightedEuclidean.flag=true;
                        x=100;
                    }
                    //if(tm==0)
                    //{
                    //DistanceGeneralizedWeightedEuclidean.flag=true;
                    //}
                    //else
                    //DistanceGeneralizedWeightedEuclidean.flag=false;
                    if("Epochs".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.setText (""+iterations);
                    classifier.update ();
                    classifier.updateLearning ();
                    if(jCheckBox2.isSelected ())
                    {
                        if(classifier.isAllVectorsCorrectlyClassified (true))
                        {
                            System.out.println ("At Modulus="+tm+" Cycles="+tc+" classifier is ready");
                            System.out.println ("Initial Modulus="+total_mode+" Initial Cycles="+total_cycles);
                            
                        }
                    }
                    if(jCheckBox3.isSelected ())
                    {
                        if(classifier.isAllVectorsCorrectlyClassified (false))
                        {
                            System.out.println ("At Modulus="+tm+" Cycles="+tc+" classifier is ready");
                            System.out.println ("Initial Modulus="+total_mode+" Initial Cycles="+total_cycles);
                            tm=-1;
                            tc=-1;
                        }
                    }
                    if(tm<= 0)
                    {
                        if(tc>1)
                        {
                            classifier.removeLosers ();
                            classifier.addPrototypeDynamically ();
                        }
                    }
                
                try
                {
                    Thread.currentThread ().sleep (delay);
                }
                catch(InterruptedException e)
                {
                    if("Exceptions".equalsIgnoreCase ((jComboBox.getSelectedItem ().toString ()))) errorWindow.append ("\nError: "+e.getMessage ());
                }
                
                }
                tc--;
                tm=total_mode;
            }
            
            for(int i=0;i<2000;i++)
            {
                x--;
                if(x<=0)
                {
                    DistanceGeneralizedWeightedEuclidean.flag=true;
                    x=100;
                }
                classifier.update ();
                classifier.updateLearning ();
            }
            
        }
        if(painting!=null)
        {
            painting.stop ();
        }
    }
    
    public void start ()
    {
        runner = new Thread (this);
        //runner.setPriority (Thread.MAX_PRIORITY);
        runner.start ();
    }
    public void stop ()
    {
        runner.stop ();
        runner = null;
    }
    
    public void initClassifier ()
    {
        if(runningmode==0)//train mode
        {
            distanceRef.setLambdas (lambdas);
            classifier = new DGRLVQClassifier (
            num_prototypes_per_category,
            pattern_of_each_class,
            validNumberOfPatternPerClass,
            learning_rate_correct,
            learning_rate_wrong,
            learning_rate_lambda,
            learning_persent_decrease,
            normalizeLambda,
            withMeanDynamicAllocation,
            isKillingLoserPrototypesAllowed,
            qualifyWinnerCount,
            maxPersentageOfPoputationAllowedToDie,
            num_categories,
            pattern_length,
            pattern_dimension,
            distanceRef);
        }
        else//test & classify mode
        {
            distanceRef.setLambdas (lambdas);
            classifier = new DGRLVQClassifier (prototypePropertiesList);
        }
    }
    private void doSave (String fileName)
    {
        String str = saveFileWindow.getText ();
        DataProcessor dp=new DataProcessor (fileName);
        dp.doSave (str);
    }
    
    private void doSaveAs ()
    {
        FileDialog fileDialog = new FileDialog (this, "Save As...", FileDialog.SAVE);
        fileDialog.show ();
        if (fileDialog.getFile () == null)
        {
            return;
        }
        String fileName = fileDialog.getDirectory () + File.separator + fileDialog.getFile ();
        doSave (fileName);
    }
    private void resetAllComponents ()
    {
        jSlider2.setValue (total_cycles);
        jTextField11.setText (total_cycles+"");
        jSlider5.setValue (total_mode);
        jTextField7.setText (total_mode+"");
        jTextField1.setText (""+delay);
        jSlider1.setValue (delay);
        jSlider3.setValue (qualifyWinnerCount);
        jTextField4.setText (qualifyWinnerCount+"");
        jSlider10.setValue (num_prototypes_per_category);
        jTextField12.setText (num_prototypes_per_category+"");
        jSlider14.setValue ((int)(learning_rate_lambda*100000));
        jTextField10.setText (learning_rate_lambda+"");
        jSlider13.setValue ((int)(learning_rate_wrong*100000));
        jTextField9.setText (learning_rate_wrong+"");
        jSlider4.setValue ((int)(learning_rate_correct*100000));
        jTextField8.setText (learning_rate_correct+"");
        jSlider6.setValue (learning_persent_decrease);
        jTextField5.setText (learning_persent_decrease+"");
        jSlider12.setValue (grid_factor);
        jTextField6.setText (grid_factor+"");
        jSlider7.setValue (width);
        jTextField3.setText (width+"");
        jSlider8.setValue (height);
        jTextField2.setText (height+"");
        
        if(withMeanDynamicAllocation)
        {
            jComboBox6.setSelectedIndex (0);
        }
        jComboBox3.setSelectedItem (distanceRef.getName ());
        if(!isKillingLoserPrototypesAllowed)
        {
            jComboBox2.setSelectedIndex (0);
        }
        
        jComboBox5.setSelectedItem (String.valueOf (maxPersentageOfPoputationAllowedToDie));
        jComboBox1.setSelectedItem (String.valueOf (distanceRef.getExpoLambda ()));
        jComboBox4.setSelectedItem (String.valueOf (distanceRef.getExpoCoordinate ()));
        jSlider3.setValue (qualifyWinnerCount);
        jTextField4.setText (""+qualifyWinnerCount);
        jToggleButton8.setSelected (this.normalizeLambda);
        if(painting != null)
        {
            painting.setSize (width, height);
            painting.setGridFactor (grid_factor);
            painting.getGraphics ().clearRect (0,0,painting.getWidth (),painting.getHeight ());
            painting.initGrid ();
            painting.setPaintingOptions (paint_background, paint_voronoi_background, paint_grid, paint_voronoi, paint_border, paint_input, paint_prototypes,paint_lambda);
            painting.setDelay (delay);
        }
        if(classifier!=null)
        {
            classifier.setMaxPersentageOfPoputationAllowedToDie (maxPersentageOfPoputationAllowedToDie);
            classifier.setQualifyWinnerCount (qualifyWinnerCount);
            classifier.setLearning (learning_rate_correct, learning_rate_wrong, learning_rate_lambda, learning_persent_decrease);
            classifier.setWithMeanDynamicAllocation (withMeanDynamicAllocation);
            classifier.setLambdaNormalization (normalizeLambda);
            classifier.setDistanceRefToAllPrototypes (distanceRef);
            classifier.setKillingLoserPrototypesAllowed (isKillingLoserPrototypesAllowed);
            
        }
    }
    private void resetDefaults ()
    {
        learning_rate_correct = 0.1;
        learning_rate_wrong = 0.00001;
        learning_rate_lambda = 0.00001;
        learning_persent_decrease=0;
        withMeanDynamicAllocation= true;
        isKillingLoserPrototypesAllowed= false;
        qualifyWinnerCount=0;
        width=300;
        height=200;
        delay=1;
        algo=0;
        paint_background = true;
        paint_voronoi_background = false;
        paint_grid = false;
        paint_voronoi = false;
        paint_prototypes = true;
        paint_input = true;
        paint_border = true;
        grid_factor=10;
        normalizeLambda=true;
        total_mode=5000;
        total_cycles=20;
        
        num_categories=2;
        num_prototypes_per_category= 1;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main (String args[])
    {
        new StartGUI ().show ();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JComboBox jComboBox4;
    private javax.swing.JComboBox jComboBox5;
    private javax.swing.JComboBox jComboBox6;
    private javax.swing.JComboBox jComboBox7;
    private javax.swing.JComboBox jComboBox8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel36;
    private javax.swing.JPanel jPanel37;
    private javax.swing.JPanel jPanel38;
    private javax.swing.JPanel jPanel39;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel40;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel42;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSlider jSlider10;
    private javax.swing.JSlider jSlider11;
    private javax.swing.JSlider jSlider12;
    private javax.swing.JSlider jSlider13;
    private javax.swing.JSlider jSlider14;
    private javax.swing.JSlider jSlider15;
    private javax.swing.JSlider jSlider16;
    private javax.swing.JSlider jSlider17;
    private javax.swing.JSlider jSlider18;
    private javax.swing.JSlider jSlider2;
    private javax.swing.JSlider jSlider3;
    private javax.swing.JSlider jSlider4;
    private javax.swing.JSlider jSlider5;
    private javax.swing.JSlider jSlider6;
    private javax.swing.JSlider jSlider7;
    private javax.swing.JSlider jSlider8;
    private javax.swing.JSlider jSlider9;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField15;
    private javax.swing.JTextField jTextField16;
    private javax.swing.JTextField jTextField17;
    private javax.swing.JTextField jTextField18;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToggleButton jToggleButton3;
    private javax.swing.JToggleButton jToggleButton4;
    private javax.swing.JToggleButton jToggleButton5;
    private javax.swing.JToggleButton jToggleButton6;
    private javax.swing.JToggleButton jToggleButton7;
    private javax.swing.JToggleButton jToggleButton8;
    private javax.swing.JToggleButton jToggleButton9;
    // End of variables declaration//GEN-END:variables
    
}
